{"version":3,"file":"static/js/4718.a7b6b164.chunk.js","mappings":"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","sources":["api/album/album_api.js","components/album/ModifyAlbum.js","pages/album/AlbumModify.js","styles/album/album.js","styles/ui/buttons.js","../node_modules/@ant-design/icons-svg/es/asn/CheckOutlined.js","../node_modules/@ant-design/icons/es/icons/CheckOutlined.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { SERVER_URL } from \"../config\";\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\nconst path = `${SERVER_URL}/api/album`;\r\n\r\n// ialbum = 세부 글 넘버.\r\n// page = 전체리스트\r\n// ialbumComment = 세부 댓글 넘버\r\n\r\n// 활동앨범 상세조회 get\r\nexport const getAlbum = async ({ pno, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.get(`${path}?ialbum=${pno}`);\r\n    // console.log(\"res\", res);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      // console.log(\"res.data임 : \", res.data);\r\n      successFn(...res.data);\r\n    } else {\r\n      failFn(\"자료 호출 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    const demo = await axios.get(`/`);\r\n    errorFn(demo.data);\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// album/listall?page=1\r\n\r\n// 활동 앨범 전체 조회 get\r\nexport const getlistAll = async ({ page, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.get(`${path}/listall?page=${page}`);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      console.log(\"res.data : \", res.data);\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"자료 호출 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    const demo = await axios.get(`/`);\r\n    errorFn(demo.data);\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// edit?ialbum=1\r\n// 수정할 앨범 선택시 세부 정보 조회 get\r\nexport const getEditAlbum = async ({ ialbum, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.get(`${path}/edit?ialbum=${ialbum}`);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      console.log(\"res.data : \", res.data);\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"자료 호출 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    const demo = await axios.get(`/`);\r\n    errorFn(demo.data);\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// 수정한 앨범 put 하기.\r\nexport const putAlbum = async ({ product, successFn, failFn, errorFn }) => {\r\n  console.log(\"product\", product);\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const res = await jwtAxios.put(`${path}`, product, header);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      console.log(\"res.data : \", res.data);\r\n      successFn(res.data);\r\n      return res.data;\r\n    } else {\r\n      failFn(\"수정에 실패하였습니다. 다시 시도해주세요.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(\r\n      \"정보수정에 실패하였습니다. 서버가 불안정합니다. 잠시 후 다시 시도해주세요.\",\r\n    );\r\n  }\r\n};\r\n\r\n// 앨범 등록 POST\r\n// path\r\n// 글, 사진 등록(비동기 통신)(커뮤니티 등록)\r\nexport const postAlbum = async ({ product, successFn, failFn, errorFn }) => {\r\n  try {\r\n    console.log(\"Add 컴포넌트에서 글 작성한거\", product);\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const response = await jwtAxios.post(`${path}`, product, header);\r\n    const status = response.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(response.data);\r\n    } else {\r\n      failFn(\"글 등록 오류\", response.statusText);\r\n    }\r\n  } catch (error) {\r\n    console.log(\"글 등록 서버오류\", error.response.data);\r\n    errorFn(\"글 등록 서버오류\", error.response.data);\r\n  }\r\n};\r\n\r\n// 앨범 댓글 등록 POST\r\n// path\r\nexport const postAlbumComment = async ({ successFn, failFn, errorFn }) => {\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const res = await jwtAxios.post();\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      // 화면처리용\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"댓글 등록에 실패하였습니다. 다시 시도해주세요.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(\r\n      \"댓글 등록에 실패하였습니다. 서버가 불안정하니 잠시 후 다시 시도해주세요.\",\r\n    );\r\n  }\r\n};\r\n\r\n// 앨범 글 삭제 Delete\r\n// ?ialbum=1\r\nexport const deleteAlbum = async ({ ialbum, successFn, failFn, errorFn }) => {\r\n  try {\r\n    // 여기서도 이미지가 추가될 수 있어요.\r\n    // header 가 필요합니다.\r\n    const res = await jwtAxios.delete(`${path}?ialbum=${ialbum}`);\r\n\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"삭제 호출 오류입니다.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(\r\n      \"삭제에 실패하였습니다. 서버가 불안정하니 잠시 후 다시 시도해주세요.\",\r\n    );\r\n  }\r\n};\r\n\r\n// 앨범 댓글 삭제 Delete\r\n// comment?ialbumComment=0&ialbum=0&iteacher=0&iparent=0\r\nexport const deleteAlbumComment = async ({\r\n  ialbumComment,\r\n  ialbum,\r\n  iteacher,\r\n  iparent,\r\n  commentInfo,\r\n  successFn,\r\n  failFn,\r\n  errorFn,\r\n}) => {\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const res = await jwtAxios.delete(\r\n      `${path}/comment?ialbumComment=${ialbumComment}&ialbum=${ialbum}&iteacher=${iteacher}&iparent=${iparent}`,\r\n      commentInfo,\r\n    );\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(res.data);\r\n    } else {\r\n      failFn();\r\n    }\r\n  } catch (error) {\r\n    errorFn();\r\n  }\r\n};\r\n","import { UploadOutlined } from \"@ant-design/icons\";\r\nimport { Button, Form, Input, Modal, Upload } from \"antd\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { getAlbum, putAlbum } from \"../../api/album/album_api\";\r\nimport { IMG_URL } from \"../../api/config\";\r\nimport { AlbumWrap, FileListStyle } from \"../../styles/album/album\";\r\nimport { PageTitle } from \"../../styles/basic\";\r\nimport { GreenBtn, PinkBtn } from \"../../styles/ui/buttons\";\r\nconst path = `${IMG_URL}/api/album`;\r\nconst imgpath = `${IMG_URL}/pic/album`;\r\nconst customRequest = ({ onSuccess }) => {\r\n  onSuccess(\"ok\");\r\n};\r\nconst initAlbumCommnet = [\r\n  {\r\n    albumTitle: \"\",\r\n    albumContents: \"\",\r\n    albumPic: [],\r\n    albumComments: [],\r\n    createdAt: \"\",\r\n  },\r\n];\r\nconst ModifyAlbum = () => {\r\n  const { pno } = useParams();\r\n  const formRef = useRef();\r\n  const [albumData, setAlbumData] = useState(initAlbumCommnet); // albumData 상태를 추가\r\n\r\n  const [form] = Form.useForm();\r\n  const [fileList, setFileList] = useState([]);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const navigate = useNavigate();\r\n  const addedFilesRef = useRef([]);\r\n  // const handleChange = info => {\r\n  //   let fileList = [...info.fileList].filter(file => !!file.status);\r\n  //   setFileList(fileList);\r\n  // };\r\n\r\n  const uploadAreaStyle = {\r\n    height: \"150px\",\r\n    lineHeight: \"150px\",\r\n  };\r\n  const handleGreenButtonClick = () => {\r\n    formRef.current.submit(); // Form의 submit 메서드 호출\r\n  };\r\n\r\n  const onFinish = async data => {\r\n    const formData = new FormData();\r\n    const dto = new Blob(\r\n      [\r\n        JSON.stringify({\r\n          iteacher: 1,\r\n          albumTitle: data.albumTitle,\r\n          albumContents: data.albumContents,\r\n          ialbum: pno,\r\n        }),\r\n      ],\r\n      { type: \"application/json\" },\r\n    );\r\n    formData.append(\"dto\", dto);\r\n\r\n    // 새로 추가된 이미지 파일들을 FormData에 추가\r\n    addedFilesRef.current.forEach(file => {\r\n      if (file.originFileObj) {\r\n        formData.append(\"pics\", file.originFileObj);\r\n      }\r\n    });\r\n\r\n    // 기존 이미지 URL들을 File 객체로 변환하고 FormData에 추가합니다.\r\n    for (const item of albumData.albumPic) {\r\n      const fileUrl = `${imgpath}/${pno}/${item}`;\r\n      const filename = item.split(\"/\").pop(); // URL에서 파일 이름을 추출합니다.\r\n      const fileObject = await convertUrlToFileObject(fileUrl, filename);\r\n      formData.append(\"pics\", fileObject);\r\n    }\r\n\r\n    // 서버에 요청을 보냅니다.\r\n    try {\r\n      const response = await putAlbum({\r\n        product: formData,\r\n        successFn: handleSuccess,\r\n        failFn: handleFailure,\r\n        errorFn: handleError,\r\n      });\r\n\r\n      // 응답 처리\r\n      console.log(\"Response from putAlbum:\", response);\r\n    } catch (error) {\r\n      handleError(error.message);\r\n    }\r\n  };\r\n\r\n  const handleSuccess = response => {\r\n    setIsModalVisible(true);\r\n    console.log(\"수정이 성공적으로 완료되었습니다.\", response);\r\n    // 성공적으로 업로드 완료 후 처리할 작업을 추가할 수 있습니다.\r\n    // 예를 들어, 수정된 앨범의 상세 페이지로 리디렉션할 수 있습니다.\r\n    navigate(`/album/details/${pno}`);\r\n  };\r\n\r\n  const handleFailure = errorMessage => {\r\n    Modal.error({\r\n      title: \"앨범 업로드 실패\",\r\n      content: errorMessage,\r\n    });\r\n  };\r\n\r\n  const handleError = error => {\r\n    console.error(\"앨범 업로드 오류:\", error);\r\n    Modal.error({\r\n      title: \"앨범 업로드 중 오류 발생\",\r\n      content:\r\n        \"서버 오류 또는 네트워크 문제가 발생했습니다. 다시 시도해주세요.\",\r\n    });\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancelConfirmation = () => {\r\n    Modal.confirm({\r\n      title: \"정말 취소하시겠습니까?\",\r\n      content: \"수정 내용이 저장되지 않습니다.\",\r\n      onOk: () => {\r\n        console.log(\"취소가 확인되었습니다.\");\r\n        navigate(\"/album\"); // 사용자를 앨범 목록 페이지로 이동\r\n      },\r\n      okText: \"확인\",\r\n      cancelText: \"계속 수정\",\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchAlbumData = async () => {\r\n      getAlbum({\r\n        pno: pno,\r\n        successFn: data => {\r\n          setAlbumData(data); // Set the album data in state\r\n\r\n          // Update form fields with the album data\r\n          form.setFieldsValue({\r\n            albumTitle: data.albumTitle,\r\n            albumContents: data.albumContents,\r\n          });\r\n\r\n          // Transform album pictures for the fileList state\r\n          const transformedFileList = data.albumPic.map((pic, index) => ({\r\n            uid: index.toString(), // uid is required to be unique\r\n            name: pic, // file name\r\n            status: \"done\", // upload status\r\n            url: `${imgpath}/${pno}/${pic}`, // file URL, adjust the path as needed\r\n          }));\r\n          setFileList(transformedFileList);\r\n        },\r\n        failFn: errorMessage => {\r\n          console.error(\"Album fetch failed:\", errorMessage);\r\n          // Handle failure (show error message to user, etc.)\r\n        },\r\n        errorFn: errorData => {\r\n          console.error(\"Error fetching album:\", errorData);\r\n          // Handle error (show error message to user, etc.)\r\n        },\r\n      });\r\n    };\r\n\r\n    fetchAlbumData();\r\n  }, [pno, form]);\r\n\r\n  const beforeUpload = file => {\r\n    addedFilesRef.current.push(file); // 새로 추가된 파일을 addedFilesRef에 추가\r\n    return false; // 파일을 자동으로 업로드하지 않음\r\n  };\r\n\r\n  const handleChange = ({ fileList: updatedFileList, file }) => {\r\n    if (file.status === \"removed\") {\r\n      // 파일이 제거된 경우, addedFilesRef에서 해당 파일 제거\r\n      const index = addedFilesRef.current.indexOf(file);\r\n      if (index > -1) {\r\n        addedFilesRef.current.splice(index, 1);\r\n      }\r\n    }\r\n    setFileList(updatedFileList); // fileList 상태를 업데이트합니다.\r\n  };\r\n\r\n  const onRemove = file => {\r\n    // 파일이 제거될 때 fileList에서 해당 파일을 제거\r\n    const newFileList = fileList.filter(item => item.uid !== file.uid);\r\n    let list = [...fileList, newFileList];\r\n    setFileList(list);\r\n  };\r\n\r\n  const convertUrlToFileObject = async (url, filename) => {\r\n    try {\r\n      const response = await fetch(url); // URL에서 이미지를 가져옵니다.\r\n      const blob = await response.blob(); // Blob으로 변환합니다.\r\n      const file = new File([blob], filename, { type: blob.type }); // File 객체를 생성합니다.\r\n      return file;\r\n    } catch (error) {\r\n      console.error(\"Error fetching file from URL:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AlbumWrap paddingTop={40} width={100} height={100}>\r\n      <PageTitle>활동앨범</PageTitle>\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: 560,\r\n          padding: 16,\r\n          borderTop: \"1.5px solid #00876D\",\r\n          borderBottom: \"1.5px solid #00876D\",\r\n          background: \"#FAFAFA\",\r\n          marginTop: 30,\r\n        }}\r\n      >\r\n        <Form ref={formRef} form={form} onFinish={onFinish}>\r\n          <Form.Item\r\n            name=\"albumTitle\"\r\n            initialValue={albumData.albumTitle} // 기존 값 설정\r\n            rules={[{ required: true, message: \"제목을 입력해주세요!\" }]}\r\n          >\r\n            <Input placeholder=\"제목 입력\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"albumContents\"\r\n            initialValue={albumData.albumContents} // 기존 값 설정\r\n            style={{ height: \"150px\" }}\r\n            rules={[{ required: true, message: \"내용을 입력해주세요!\" }]}\r\n          >\r\n            <Input.TextArea\r\n              placeholder=\"내용 입력\"\r\n              style={{ height: \"150px\" }}\r\n            />\r\n          </Form.Item>\r\n          <FileListStyle>\r\n            <Upload.Dragger\r\n              action={`${path}`}\r\n              listType=\"picture\"\r\n              fileList={fileList}\r\n              beforeUpload={beforeUpload}\r\n              onRemove={onRemove}\r\n              onChange={handleChange}\r\n              customRequest={customRequest}\r\n              className=\"upload-list-inline\"\r\n              multiple={true}\r\n              style={uploadAreaStyle}\r\n              // onPreview={handlePreview}\r\n            >\r\n              <Button icon={<UploadOutlined />}>업로드 </Button>\r\n            </Upload.Dragger>\r\n          </FileListStyle>\r\n        </Form>\r\n        <div\r\n          style={{\r\n            paddingTop: 15,\r\n            float: \"right\",\r\n            // position: \"absolute\",\r\n            // background: \"red\",\r\n          }}\r\n        >\r\n          <GreenBtn onClick={handleGreenButtonClick}>수정</GreenBtn>\r\n\r\n          <PinkBtn\r\n            onClick={handleCancelConfirmation}\r\n            style={{ marginLeft: 20 }}\r\n          >\r\n            취소\r\n          </PinkBtn>\r\n        </div>\r\n      </div>\r\n\r\n      <Link to=\"/album\">\r\n        <Modal\r\n          title=\"수정 완료\"\r\n          open={isModalVisible}\r\n          onOk={handleOk}\r\n          onCancel={handleCancel}\r\n          okText=\"확인\"\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          width={350}\r\n        >\r\n          <p>성공적으로 수정되었습니다.</p>\r\n        </Modal>\r\n      </Link>\r\n    </AlbumWrap>\r\n  );\r\n};\r\n\r\nexport default ModifyAlbum;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport ModifyAlbum from \"../../components/album/ModifyAlbum\";\r\nimport { getAlbum } from \"../../api/album/album_api\"; // 데이터를 가져오는 API 함수를 import\r\n\r\nconst AlbumModify = () => {\r\n  const { pno } = useParams();\r\n  const [albumData, setAlbumData] = useState(null); // 앨범 데이터를 위한 상태\r\n\r\n  useEffect(() => {\r\n    // 데이터 가져오기\r\n    getAlbum({\r\n      pno: pno,\r\n      successFn: data => {\r\n        setAlbumData(data); // 앨범 데이터 상태 업데이트\r\n      },\r\n      // 에러 처리는 필요에 따라 추가\r\n    });\r\n  }, [pno]);\r\n\r\n  return albumData ? <ModifyAlbum albumData={albumData} /> : null; // 데이터가 있을 때만 ModifyAlbum 렌더링\r\n};\r\n\r\nexport default AlbumModify;\r\n","/* eslint-disable no-undef */\r\nimport styled from \"@emotion/styled\";\r\nimport { colors, fonts, shadow } from \"../basic\";\r\nexport const AlbumWrap = styled.div`\r\n  overflow: hidden;\r\n  font-family: \"KOTRAHOPE\";\r\n  padding-top: ${props => props.paddingTop + \"px\"};\r\n\r\n  width: ${props => props.width + \"%\"};\r\n  margin: 0 auto;\r\n  height: ${props => props.height + \"%\"};\r\n  input {\r\n    padding: 8px;\r\n    border: 1px solid ${colors.grayLight};\r\n    border-radius: 10px;\r\n  }\r\n  input::placeholder {\r\n    color: ${colors.grayDeep};\r\n  }\r\n`;\r\n\r\nexport const AlbumTopBar = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 3.75rem;\r\n  padding: 1.8rem;\r\n`;\r\nexport const SearchBar = styled.div`\r\n  img {\r\n    position: absolute;\r\n    width: 5%;\r\n    right: 30%;\r\n    height: 100%;\r\n  }\r\n`;\r\nexport const InnerAlbum = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n\r\n  .gallery {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0 auto;\r\n    margin-top: 2.5rem;\r\n  }\r\n\r\n  .gallery-item {\r\n    width: ${props => props.width + \"rem\"};\r\n    height: ${props => props.height + \"rem\"};\r\n    border: 1px solid #ddd;\r\n    text-align: center;\r\n    margin-bottom: 7rem;\r\n  }\r\n\r\n  .gallery-item img {\r\n    width: 100%;\r\n    height: 100%;\r\n    margin-bottom: 0.625rem;\r\n  }\r\n`;\r\n// export const HeaderLeft = styled.div`\r\n\r\nexport const AlbumList = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr); // 3개의 이미지를 가로로 나란히 표시\r\n  gap: 0.4rem;\r\n  margin: 0px auto;\r\n  position: relative;\r\n  z-index: 2;\r\n\r\n  .image-grid {\r\n    gap: 1.6rem;\r\n    margin: 1.6rem;\r\n    text-align: center;\r\n  }\r\n  .image-grid > p {\r\n    font-size: 1.8rem;\r\n    margin: 1rem 0;\r\n    font-family: ${fonts.pretendard};\r\n    color: ${colors.black};\r\n  }\r\n  .image-item {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  .image-item img {\r\n    border-radius: 5%;\r\n    width: 100%;\r\n    text-align: center;\r\n  }\r\n\r\n  .loading {\r\n    height: 10rem;\r\n    margin: 3rem;\r\n    text-align: center;\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nexport const SwiperWrap = styled.div`\r\n  body {\r\n    background-color: #eee;\r\n    font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\r\n    font-size: 14px;\r\n    color: #000;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  .swiper-pagination {\r\n    text-align: center;\r\n    padding: 0 2rem 0.5rem;\r\n  }\r\n  .swiper {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding-top: 40px;\r\n    padding-bottom: 60px;\r\n  }\r\n\r\n  .swiper-slide {\r\n    background-position: center;\r\n    background-size: cover;\r\n    width: 300px;\r\n    height: 300px;\r\n  }\r\n\r\n  .swiper-slide img {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const ContentWrap = styled.div`\r\n  margin-top: 2rem;\r\n  background: #fff;\r\n\r\n  border-top: 0.2rem solid ${colors.greenDeep};\r\n  .rce-container-input {\r\n    padding: 0 2rem;\r\n    background-color: #fafafa;\r\n  }\r\n`;\r\n\r\nexport const AlbumTitle = styled.h3`\r\n  padding-left: 2.8rem;\r\n  padding-bottom: 3rem;\r\n  background: url(${process.env.PUBLIC_URL + \"/images/information/logo1.svg\"})\r\n    no-repeat left 0.25rem/2.3rem;\r\n  color: ${colors.greenDeep};\r\n`;\r\n\r\nexport const TitleWrap = styled.div`\r\n  display: flex;\r\n  height: 4rem;\r\n  align-items: center;\r\n  border-bottom: 1px solid ${colors.grayBar};\r\n  padding: 3.5rem;\r\n  position: relative;\r\n  h3 {\r\n    display: inline-block;\r\n    font-size: 2.7rem;\r\n    font-weight: 400;\r\n    flex: 1;\r\n    text-align: center;\r\n  }\r\n  p {\r\n    position: absolute;\r\n    right: 2rem;\r\n    font-family: Pretendard;\r\n    font-size: 1.5rem;\r\n    text-align: right;\r\n    color: ${colors.grayDeep};\r\n  }\r\n`;\r\n\r\nexport const MainContent = styled.div`\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-bottom: 0.2rem solid ${colors.greenDeep};\r\n`;\r\n\r\nexport const DetailsText = styled.div`\r\n  overflow: auto;\r\n  width: 100%;\r\n  height: 100%;\r\n  font-family: Pretendard;\r\n  font-size: 2rem;\r\n\r\n  p {\r\n    line-height: 1.8;\r\n    margin: 2rem 0;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport const Footer = styled.div`\r\n  text-align: right;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin-top: 1.8rem;\r\n  margin-bottom: 9rem;\r\n  position: relative;\r\n  z-index: 10;\r\n\r\n  button {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nexport const CommentWrap = styled.div`\r\n  background-color: #fafafa;\r\n  padding-bottom: 2rem;\r\n`;\r\n\r\nexport const FileListStyle = styled.div`\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const buttonStyle = {\r\n  position: \"relative\",\r\n  zIndex: 100,\r\n};\r\n","import styled from \"@emotion/styled\";\r\nimport { colors, shadow } from \"../basic\";\r\nimport { Button, Modal, Space } from \"antd\";\r\n// 버튼 기본 스타일 정의\r\nconst defaultBtnStyle = {\r\n  fontSize: \"1.8rem\",\r\n  fontFamily: `\"KOTRAHOPE\", \"Pretendard\", sans-serif`,\r\n  background: \"#fff\",\r\n  border: 0,\r\n  padding: \"1rem 1.5rem\",\r\n  borderRadius: \"1rem\",\r\n  cursor: \"pointer\",\r\n  minWidth: \"8rem\",\r\n};\r\n\r\n// 버튼 마우스오버 효과\r\nconst buttonHover = {\r\n  boxShadow: \"0px 0px 10px 0px rgba(0, 0, 0, 0.15)\",\r\n};\r\n\r\nexport const BtnWrap = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  gap: 1rem;\r\n  align-items: center;\r\n`;\r\n\r\n// 색상 별 버튼 style\r\nexport const GreenBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: ${colors.greenLight};\r\n  color: ${colors.greenDeep};\r\n  transition: 0.2s;\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\nexport const OrangeBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: ${colors.orangeLight};\r\n  color: ${colors.orangeDeep};\r\n  transition: 0.2s;\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\nexport const PinkBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: ${colors.pinkLight};\r\n  color: ${colors.pinkDeep};\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\n\r\nexport const BlueBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: ${colors.blueLight};\r\n  color: ${colors.blueDeep};\r\n  transition: 0.2s;\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\nexport const RedBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: ${colors.redLight};\r\n  color: ${colors.redDeep};\r\n  transition: 0.2s;\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\nexport const PurpleBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: ${colors.purpleLight};\r\n  color: ${colors.purpleDeep};\r\n  transition: 0.2s;\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\nexport const GrayBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: ${colors.grayLight};\r\n  color: ${colors.grayDeep};\r\n  transition: 0.2s;\r\n  :hover {\r\n    ${shadow}\r\n  }\r\n`;\r\nexport const BlackBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: ${colors.grayDeep};\r\n  color: ${colors.white};\r\n  transition: 0.1s;\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\n\r\n// 메인 배너 버튼\r\nexport const MainPinkBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: #ffadc7;\r\n  color: #fe77a2;\r\n  transition: 0.1s;\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\n\r\nexport const MainBrownBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  background: #ffcc58;\r\n  color: #db8400;\r\n  transition: 0.1s;\r\n  :hover {\r\n    ${buttonHover}\r\n  }\r\n`;\r\n\r\n// 메뉴 접기 버튼\r\nexport const AllBtn = styled.button`\r\n  ${defaultBtnStyle}\r\n  position: absolute;\r\n  right: -2.5rem;\r\n  top: 2.5rem;\r\n  padding: 1rem 0.5rem;\r\n  font-size: 1.6rem;\r\n  border-radius: 0 0.5rem 0.5rem 0;\r\n  min-width: auto;\r\n  width: 2.5rem;\r\n  height: 7rem;\r\n  background: ${colors.greenLight};\r\n  color: ${colors.greenDeep};\r\n  z-index: 11;\r\n  word-break: break-all;\r\n  line-height: 1;\r\n`;\r\n\r\nexport const StyledeleteModal = styled(Modal)`\r\n  ant-btn {\r\n    color: red;\r\n  }\r\n`;\r\n","// This icon file is generated automatically.\nvar CheckOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z\" } }] }, \"name\": \"check\", \"theme\": \"outlined\" };\nexport default CheckOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport CheckOutlinedSvg from \"@ant-design/icons-svg/es/asn/CheckOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar CheckOutlined = function CheckOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: CheckOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  CheckOutlined.displayName = 'CheckOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(CheckOutlined);"],"names":["path","concat","SERVER_URL","getAlbum","async","pno","successFn","failFn","errorFn","_ref","res","jwtAxios","get","status","toString","charAt","data","error","axios","console","log","getlistAll","page","_ref2","putAlbum","product","_ref4","header","headers","put","postAlbum","_ref5","response","post","statusText","deleteAlbum","ialbum","_ref7","delete","IMG_URL","imgpath","customRequest","onSuccess","initAlbumCommnet","albumTitle","albumContents","albumPic","albumComments","createdAt","ModifyAlbum","useParams","formRef","useRef","albumData","setAlbumData","useState","form","Form","useForm","fileList","setFileList","isModalVisible","setIsModalVisible","navigate","useNavigate","addedFilesRef","handleSuccess","handleFailure","errorMessage","Modal","title","content","handleError","useEffect","setFieldsValue","transformedFileList","map","pic","index","uid","name","url","errorData","fetchAlbumData","convertUrlToFileObject","filename","fetch","blob","File","type","_jsxs","AlbumWrap","paddingTop","width","height","children","_jsx","PageTitle","style","padding","borderTop","borderBottom","background","marginTop","ref","onFinish","formData","FormData","dto","Blob","JSON","stringify","iteacher","append","current","forEach","file","originFileObj","item","fileUrl","split","pop","fileObject","message","Item","initialValue","rules","required","Input","placeholder","TextArea","FileListStyle","Upload","Dragger","action","listType","beforeUpload","push","onRemove","newFileList","filter","list","onChange","updatedFileList","indexOf","splice","className","multiple","lineHeight","Button","icon","UploadOutlined","float","GreenBtn","onClick","handleGreenButtonClick","submit","PinkBtn","handleCancelConfirmation","confirm","onOk","okText","cancelText","marginLeft","Link","to","open","handleOk","onCancel","handleCancel","cancelButtonProps","display","AlbumModify","styled","div","_templateObject","_taggedTemplateLiteral","props","colors","grayLight","grayDeep","AlbumTopBar","_templateObject2","SearchBar","_templateObject3","AlbumList","_templateObject4","_templateObject5","fonts","pretendard","black","SwiperWrap","_templateObject6","ContentWrap","_templateObject7","greenDeep","AlbumTitle","h3","_templateObject8","TitleWrap","_templateObject9","grayBar","MainContent","_templateObject10","DetailsText","_templateObject11","Footer","_templateObject12","CommentWrap","_templateObject13","_templateObject14","defaultBtnStyle","fontSize","fontFamily","border","borderRadius","cursor","minWidth","buttonHover","boxShadow","BtnWrap","button","greenLight","OrangeBtn","orangeLight","orangeDeep","pinkLight","pinkDeep","BlueBtn","blueLight","blueDeep","PurpleBtn","redLight","redDeep","purpleLight","purpleDeep","GrayBtn","shadow","MainPinkBtn","white","MainBrownBtn","AllBtn","CheckOutlined","React","AntdIcon","_extends","CheckOutlinedSvg"],"sourceRoot":""}