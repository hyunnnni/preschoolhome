{"version":3,"file":"static/js/341.d68e7732.chunk.js","mappings":"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","sources":["api/album/album_api.js","hooks/useCustomLogin.js","components/album/ModifyAlbum.js","pages/album/AlbumModify.js","styles/album/album.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { SERVER_URL } from \"../config\";\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\nconst path = `${SERVER_URL}/api/album`;\r\n\r\n// ialbum = 세부 글 넘버.\r\n// page = 전체리스트\r\n// ialbumComment = 세부 댓글 넘버\r\n\r\n// 활동앨범 상세조회 get\r\nexport const getAlbum = async ({ pno, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.get(`${path}?ialbum=${pno}`);\r\n    // console.log(\"res\", res);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      // console.log(\"res.data임 : \", res.data);\r\n      successFn({ ...res.data });\r\n    } else {\r\n      failFn(\"자료 호출 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    const demo = await axios.get(`/`);\r\n    errorFn(demo.data);\r\n    // console.log(error);\r\n  }\r\n};\r\n\r\n// album/listall?page=1\r\n\r\n// 활동 앨범 전체 조회 get\r\nexport const getlistAll = async ({ page, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.get(`${path}/listall?page=${page}`);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      // console.log(\"res.data : \", res.data);\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"자료 호출 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    const demo = await axios.get(`/`);\r\n    errorFn(demo.data);\r\n    // console.log(error);\r\n  }\r\n};\r\n\r\n// edit?ialbum=1\r\n// 수정할 앨범 선택시 세부 정보 조회 get\r\nexport const getEditAlbum = async ({ ialbum, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.get(`${path}/edit?ialbum=${ialbum}`);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      // console.log(\"res.data : \", res.data);\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"자료 호출 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    const demo = await axios.get(`/`);\r\n    errorFn(demo.data);\r\n    // console.log(error);\r\n  }\r\n};\r\n\r\n// 수정한 앨범 put 하기.\r\nexport const putAlbum = async ({ product, successFn, failFn, errorFn }) => {\r\n  // console.log(\"product\", product);\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const res = await jwtAxios.put(`${path}`, product, header);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      // console.log(\"res.data : \", res.data);\r\n      successFn(res.data);\r\n      return res.data;\r\n    } else {\r\n      failFn(\"수정에 실패하였습니다. 다시 시도해주세요.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(\r\n      \"정보수정에 실패하였습니다. 서버가 불안정합니다. 잠시 후 다시 시도해주세요.\",\r\n    );\r\n  }\r\n};\r\n\r\n// 앨범 등록 POST\r\n// path\r\n// 글, 사진 등록(비동기 통신)(커뮤니티 등록)\r\nexport const postAlbum = async ({ product, successFn, failFn, errorFn }) => {\r\n  try {\r\n    // console.log(\"Add 컴포넌트에서 글 작성한거\", product);\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const response = await jwtAxios.post(`${path}`, product, header);\r\n    const status = response.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(response.data);\r\n    } else {\r\n      failFn(\"글 등록 오류\", response.statusText);\r\n    }\r\n  } catch (error) {\r\n    // console.log(\"글 등록 서버오류\", error.response.data);\r\n    errorFn(\"글 등록 서버오류\", error.response.data);\r\n  }\r\n};\r\n\r\n// 앨범 댓글 등록 POST\r\n// path\r\nexport const postAlbumComment = async ({ successFn, failFn, errorFn }) => {\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const res = await jwtAxios.post();\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      // 화면처리용\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"댓글 등록에 실패하였습니다. 다시 시도해주세요.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(\r\n      \"댓글 등록에 실패하였습니다. 서버가 불안정하니 잠시 후 다시 시도해주세요.\",\r\n    );\r\n  }\r\n};\r\n\r\n// 앨범 글 삭제 Delete\r\n// ?ialbum=1\r\nexport const deleteAlbum = async ({ ialbum, successFn, failFn, errorFn }) => {\r\n  try {\r\n    // 여기서도 이미지가 추가될 수 있어요.\r\n    // header 가 필요합니다.\r\n    const res = await jwtAxios.delete(`${path}?ialbum=${ialbum}`);\r\n\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"삭제 호출 오류입니다.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(\r\n      \"삭제에 실패하였습니다. 서버가 불안정하니 잠시 후 다시 시도해주세요.\",\r\n    );\r\n  }\r\n};\r\n\r\n// 앨범 댓글 삭제 Delete\r\n// comment?ialbumComment=0&ialbum=0&iteacher=0&iparent=0\r\nexport const deleteAlbumComment = async ({\r\n  ialbumComment,\r\n  ialbum,\r\n  iteacher,\r\n  iparent,\r\n  commentInfo,\r\n  successFn,\r\n  failFn,\r\n  errorFn,\r\n}) => {\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const res = await jwtAxios.delete(\r\n      `${path}/comment?ialbumComment=${ialbumComment}&ialbum=${ialbum}&iteacher=${iteacher}&iparent=${iparent}`,\r\n      commentInfo,\r\n    );\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(res.data);\r\n    } else {\r\n      failFn();\r\n    }\r\n  } catch (error) {\r\n    errorFn();\r\n  }\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  loginPostAsync,\r\n  logout,\r\n  postParentLoginAsync,\r\n} from \"../slices/loginSlice\";\r\nimport { getCookie, setCookie } from \"../util/cookieUtil\";\r\nimport { refreshJWT } from \"../util/jwtUtil\";\r\n\r\nconst useCustomLogin = () => {\r\n  // 패스 이동하기\r\n  const navigate = useNavigate();\r\n\r\n  // RTK 상태값 업데이트\r\n  const dispatch = useDispatch();\r\n\r\n  // RTK 상태값 읽기\r\n  const loginState = useSelector(state => state.loginSlice);\r\n\r\n  // 로그인 상태값 파악\r\n  const isLogin = loginState.teacherUid ? true : false;\r\n  const isName = loginState.teacherNm ? true : false;\r\n  const isParentLogin = loginState.iparent ? true : false;\r\n\r\n  // 로그인 기능\r\n  const doLogin = ({ loginParam, successFn, failFn, errorFn }) => {\r\n    // 로그인 어느화면에서 실행이 될 소지가 높아요.\r\n    // 로그인 상태 업데이트\r\n    const action = dispatch(\r\n      loginPostAsync({ loginParam, successFn, failFn, errorFn }),\r\n    );\r\n    // 결과값\r\n    return action.payload;\r\n  };\r\n\r\n  // 학부모 로그인 기능\r\n  const doParentLogin = ({ loginParam, successFn, failFn, errorFn }) => {\r\n    // 로그인 어느화면에서 실행이 될 소지가 높아요.\r\n    // 로그인 상태 업데이트\r\n    const action = dispatch(\r\n      postParentLoginAsync({ loginParam, successFn, failFn, errorFn }),\r\n    );\r\n    // 결과값\r\n    return action.payload;\r\n  };\r\n\r\n  // 로그아웃 기능\r\n  const doLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  // 패스이동 기능\r\n  const moveToPath = path => {\r\n    // 패스로 이동 후에 replace:ture 를 적용시 뒤로 가기 화면\r\n    // 이전 페이지 기록을 남기지 않는다.\r\n    navigate({ pathname: path }, { replace: true });\r\n  };\r\n\r\n  // 로그인 페이지로 이동\r\n  const moveToLogin = () => {\r\n    // console.log(\"페이지 이동\");\r\n    return <Navigate replace to=\"/login\" />;\r\n  };\r\n\r\n  // 액세스 토큰 리프레시 및 업데이트\r\n  const refreshAccessToken = async () => {\r\n    const memberInfo = getCookie(\"member\");\r\n    const { accessToken, refreshToken } = memberInfo;\r\n\r\n    try {\r\n      const newTokens = await refreshJWT(accessToken, refreshToken);\r\n      // 새로운 액세스 토큰으로 기존 쿠키의 accessToken 값만 업데이트\r\n      memberInfo.accessToken = newTokens.accessToken;\r\n      setCookie(\"member\", memberInfo, 1);\r\n      return newTokens.accessToken;\r\n    } catch (error) {\r\n      // 리프레시 실패 처리\r\n      console.error(\"토큰 리프레시 실패:\", error);\r\n      throw error; // 실패한 경우 예외를 다시 던져서 호출자가 처리할 수 있도록 함\r\n    }\r\n  };\r\n\r\n  return {\r\n    loginState,\r\n    isLogin,\r\n    isName,\r\n    isParentLogin,\r\n    doLogin,\r\n    doLogout,\r\n    doParentLogin,\r\n    moveToPath,\r\n    moveToLogin,\r\n    refreshAccessToken,\r\n  };\r\n};\r\n\r\nexport default useCustomLogin;\r\n","import { UploadOutlined } from \"@ant-design/icons\";\r\nimport { Button, Form, Input, Modal, Upload } from \"antd\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { getAlbum, putAlbum } from \"../../api/album/album_api\";\r\nimport { IMG_URL } from \"../../api/config\";\r\nimport { AlbumWrap, FileListStyle } from \"../../styles/album/album\";\r\nimport { PageTitle } from \"../../styles/basic\";\r\nimport { GreenBtn, PinkBtn } from \"../../styles/ui/buttons\";\r\nconst path = `${IMG_URL}/api/album`;\r\nconst imgpath = `${IMG_URL}/pic/album`;\r\nconst customRequest = ({ onSuccess }) => {\r\n  onSuccess(\"ok\");\r\n};\r\nconst initAlbumCommnet = [\r\n  {\r\n    albumTitle: \"\",\r\n    albumContents: \"\",\r\n    albumPic: [],\r\n    albumComments: [],\r\n    createdAt: \"\",\r\n  },\r\n];\r\n\r\nconst ModifyAlbum = () => {\r\n  const { pno } = useParams();\r\n  const formRef = useRef();\r\n  const [albumData, setAlbumData] = useState(initAlbumCommnet); // albumData 상태를 추가\r\n\r\n  const [form] = Form.useForm();\r\n  const [fileList, setFileList] = useState([]);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const navigate = useNavigate();\r\n  const addedFilesRef = useRef([]);\r\n  // const handleChange = info => {\r\n  //   let fileList = [...info.fileList].filter(file => !!file.status);\r\n  //   setFileList(fileList);\r\n  // };\r\n\r\n  const uploadAreaStyle = {\r\n    height: \"150px\",\r\n    lineHeight: \"150px\",\r\n  };\r\n  const handleGreenButtonClick = () => {\r\n    formRef.current.submit(); // Form의 submit 메서드 호출\r\n  };\r\n\r\n  // URL에서 파일을 생성하고 fileList 상태를 업데이트하는 함수\r\n  const imageUrlToFile = async imageUrl => {\r\n    try {\r\n      // console.log(\"imageUrl\", imageUrl);\r\n      const fileName = imageUrl.substring(imageUrl.lastIndexOf(\"/\") + 1);\r\n      const response = await fetch(imageUrl, { mode: \"no-cors\" });\r\n      const blob = await response.blob();\r\n      const imageFile = new File([blob], fileName, { type: \"image/jpeg\" }); // MIME type을 지정할 수 있습니다.\r\n\r\n      // fileList에 새로운 파일을 추가합니다.\r\n      setFileList(prevFileList => [...prevFileList, imageFile]);\r\n    } catch (error) {\r\n      console.error(\"Error converting image URL to File:\", error);\r\n    }\r\n  };\r\n  const handleSuccess = response => {\r\n    setIsModalVisible(true);\r\n    // console.log(\"수정이 성공적으로 완료되었습니다.\", response);\r\n    // 성공적으로 업로드 완료 후 처리할 작업을 추가할 수 있습니다.\r\n    // 예를 들어, 수정된 앨범의 상세 페이지로 리디렉션할 수 있습니다.\r\n    navigate(`/album/details/${pno}`);\r\n  };\r\n\r\n  const handleFailure = errorMessage => {\r\n    Modal.error({\r\n      title: \"앨범 업로드 실패\",\r\n      content: errorMessage,\r\n    });\r\n  };\r\n\r\n  const handleError = error => {\r\n    console.error(\"앨범 업로드 오류:\", error);\r\n    Modal.error({\r\n      title: \"앨범 업로드 중 오류 발생\",\r\n      content:\r\n        \"서버 오류 또는 네트워크 문제가 발생했습니다. 다시 시도해주세요.\",\r\n    });\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancelConfirmation = () => {\r\n    Modal.confirm({\r\n      title: \"정말 취소하시겠습니까?\",\r\n      content: \"수정 내용이 저장되지 않습니다.\",\r\n      onOk: () => {\r\n        // console.log(\"취소가 확인되었습니다.\");\r\n        navigate(\"/album\"); // 사용자를 앨범 목록 페이지로 이동\r\n      },\r\n      okText: \"확인\",\r\n      cancelText: \"계속 수정\",\r\n    });\r\n  };\r\n\r\n  const onFinish = async data => {\r\n    const formData = new FormData();\r\n    const dto = new Blob(\r\n      [\r\n        JSON.stringify({\r\n          iteacher: 1,\r\n          albumTitle: data.albumTitle,\r\n          albumContents: data.albumContents,\r\n          ialbum: pno,\r\n        }),\r\n      ],\r\n      { type: \"application/json\" },\r\n    );\r\n    formData.append(\"dto\", dto);\r\n\r\n    // 새로 추가된 이미지 파일을 FormData에 추가합니다.\r\n    fileList.forEach(async file => {\r\n      const response = await fetch(file);\r\n      const data = await response.blob();\r\n      if (file.originFileObj) {\r\n        // 새로운 파일인 경우, 파일 데이터를 추가합니다.\r\n        formData.append(\"pics\", file.originFileObj);\r\n      } else if (file.url) {\r\n        // 이미 서버에 존재하는 파일인 경우, 파일 경로를 추가합니다.\r\n        formData.append(\"pics\", file.url);\r\n      }\r\n    });\r\n\r\n    // 서버에 요청을 보냅니다.\r\n    try {\r\n      const response = await putAlbum({\r\n        product: formData,\r\n        successFn: handleSuccess,\r\n        failFn: handleFailure,\r\n        errorFn: handleError,\r\n      });\r\n\r\n      // 응답 처리\r\n      // console.log(\"Response from putAlbum:\", response);\r\n    } catch (error) {\r\n      handleError(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchAlbumData = async () => {\r\n      getAlbum({\r\n        pno: pno,\r\n        successFn: data => {\r\n          setAlbumData(data); // Set the album data in state\r\n\r\n          // Update form fields with the album data\r\n          form.setFieldsValue({\r\n            albumTitle: data.albumTitle,\r\n            albumContents: data.albumContents,\r\n          });\r\n\r\n          // Transform album pictures for the fileList state\r\n          const transformedFileList = data.albumPic.map((pic, index) => ({\r\n            uid: index.toString(), // uid is required to be unique\r\n            name: pic, // file name\r\n            status: \"done\", // upload status\r\n            url: `${imgpath}/${pno}/${pic}`, // file URL, adjust the path as needed\r\n          }));\r\n          setFileList(transformedFileList);\r\n        },\r\n        failFn: errorMessage => {\r\n          console.error(\"Album fetch failed:\", errorMessage);\r\n          // Handle failure (show error message to user, etc.)\r\n        },\r\n        errorFn: errorData => {\r\n          console.error(\"Error fetching album:\", errorData);\r\n          // Handle error (show error message to user, etc.)\r\n        },\r\n      });\r\n    };\r\n\r\n    fetchAlbumData();\r\n  }, [pno, form]);\r\n\r\n  const beforeUpload = file => {\r\n    // 새로 업로드되는 파일을 fileList에 추가\r\n    const newFileList = [\r\n      ...fileList,\r\n      {\r\n        uid: file.uid, // 파일의 고유 ID\r\n        name: file.name, // 파일 이름\r\n        status: \"done\", // 파일 상태\r\n        originFileObj: file, // 파일 객체\r\n      },\r\n    ];\r\n    setFileList(newFileList);\r\n    return false; // 파일을 자동으로 업로드하지 않음\r\n  };\r\n\r\n  const handleChange = ({ fileList: newFileList }) => {\r\n    // 업로드된 파일의 상태 변화를 처리\r\n    setFileList(newFileList);\r\n  };\r\n\r\n  const onRemove = file => {\r\n    // 파일이 제거될 때 fileList에서 해당 파일을 제거\r\n    const newFileList = fileList.filter(item => item.uid !== file.uid);\r\n    setFileList(newFileList);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   const fetchAlbumData = async () => {\r\n  //     getAlbum({\r\n  //       pno: pno,\r\n  //       successFn: data => {\r\n  //         setAlbumData(data); // Set the album data in state\r\n\r\n  //         // Update form fields with the album data\r\n  //         form.setFieldsValue({\r\n  //           albumTitle: data.albumTitle,\r\n  //           albumContents: data.albumContents,\r\n  //         });\r\n\r\n  //         // Transform album pictures for the fileList state\r\n  //         const transformedFileList = data.albumPic.map((pic, index) => ({\r\n  //           uid: index.toString(), // uid is required to be unique\r\n  //           name: pic, // file name\r\n  //           status: \"done\", // upload status\r\n  //           url: `${imgpath}/${pno}/${pic}`, // file URL, adjust the path as needed\r\n  //         }));\r\n  //         setFileList(transformedFileList);\r\n  //       },\r\n  //       failFn: errorMessage => {\r\n  //         console.error(\"Album fetch failed:\", errorMessage);\r\n  //         // Handle failure (show error message to user, etc.)\r\n  //       },\r\n  //       errorFn: errorData => {\r\n  //         console.error(\"Error fetching album:\", errorData);\r\n  //         // Handle error (show error message to user, etc.)\r\n  //       },\r\n  //     });\r\n  //   };\r\n  //   fetchAlbumData();\r\n  //   imageUrlToFile(fileList);\r\n  // }, [pno, form]);\r\n\r\n  return (\r\n    <AlbumWrap paddingTop={40} width={100} height={100}>\r\n      <PageTitle>활동앨범</PageTitle>\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: 560,\r\n          padding: 16,\r\n          borderTop: \"1.5px solid #00876D\",\r\n          borderBottom: \"1.5px solid #00876D\",\r\n          background: \"#FAFAFA\",\r\n          marginTop: 30,\r\n        }}\r\n      >\r\n        <Form ref={formRef} form={form} onFinish={onFinish}>\r\n          <Form.Item\r\n            name=\"albumTitle\"\r\n            initialValue={albumData.albumTitle} // 기존 값 설정\r\n            rules={[{ required: true, message: \"제목을 입력해주세요!\" }]}\r\n          >\r\n            <Input placeholder=\"제목 입력\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"albumContents\"\r\n            initialValue={albumData.albumContents} // 기존 값 설정\r\n            style={{ height: \"150px\" }}\r\n            rules={[{ required: true, message: \"내용을 입력해주세요!\" }]}\r\n          >\r\n            <Input.TextArea\r\n              placeholder=\"내용 입력\"\r\n              style={{ height: \"150px\" }}\r\n            />\r\n          </Form.Item>\r\n          <FileListStyle>\r\n            <Upload.Dragger\r\n              action={`${path}`}\r\n              listType=\"picture\"\r\n              fileList={fileList}\r\n              beforeUpload={beforeUpload}\r\n              onRemove={onRemove}\r\n              onChange={handleChange}\r\n              customRequest={customRequest}\r\n              className=\"upload-list-inline\"\r\n              multiple={true}\r\n              style={uploadAreaStyle}\r\n              // onPreview={handlePreview}\r\n            >\r\n              <Button icon={<UploadOutlined />}>업로드 </Button>\r\n            </Upload.Dragger>\r\n          </FileListStyle>\r\n        </Form>\r\n        <div\r\n          style={{\r\n            paddingTop: 15,\r\n            float: \"right\",\r\n            // position: \"absolute\",\r\n            // background: \"red\",\r\n          }}\r\n        >\r\n          <GreenBtn onClick={handleGreenButtonClick}>수정</GreenBtn>\r\n\r\n          <PinkBtn\r\n            onClick={handleCancelConfirmation}\r\n            style={{ marginLeft: 20 }}\r\n          >\r\n            취소\r\n          </PinkBtn>\r\n        </div>\r\n      </div>\r\n\r\n      <Link to=\"/album\">\r\n        <Modal\r\n          title=\"수정 완료\"\r\n          open={isModalVisible}\r\n          onOk={handleOk}\r\n          onCancel={handleCancel}\r\n          okText=\"확인\"\r\n          cancelButtonProps={{ style: { display: \"none\" } }}\r\n          width={350}\r\n        >\r\n          <p>성공적으로 수정되었습니다.</p>\r\n        </Modal>\r\n      </Link>\r\n    </AlbumWrap>\r\n  );\r\n};\r\n\r\nexport default ModifyAlbum;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport ModifyAlbum from \"../../components/album/ModifyAlbum\";\r\nimport { getAlbum } from \"../../api/album/album_api\"; // 데이터를 가져오는 API 함수를 import\r\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\r\n\r\nconst AlbumModify = () => {\r\n  const { pno } = useParams();\r\n  const [albumData, setAlbumData] = useState(null); // 앨범 데이터를 위한 상태\r\n  const { isLogin } = useCustomLogin(); // 로그인 상태를 가져옵니다.\r\n  useEffect(() => {\r\n    // 데이터 가져오기\r\n    getAlbum({\r\n      pno: pno,\r\n      successFn: data => {\r\n        setAlbumData(data); // 앨범 데이터 상태 업데이트\r\n      },\r\n      // 에러 처리는 필요에 따라 추가\r\n    });\r\n  }, [pno]);\r\n\r\n  return albumData ? (\r\n    <ModifyAlbum albumData={albumData} isLogin={isLogin} />\r\n  ) : null; // 데이터가 있을 때만 ModifyAlbum 렌더링\r\n};\r\n\r\nexport default AlbumModify;\r\n","/* eslint-disable no-undef */\r\nimport styled from \"@emotion/styled\";\r\nimport { colors, fonts, shadow } from \"../basic\";\r\nexport const AlbumWrap = styled.div`\r\n  overflow: hidden;\r\n  font-family: \"KOTRAHOPE\";\r\n  padding-top: ${props => props.paddingTop + \"px\"};\r\n\r\n  width: ${props => props.width + \"%\"};\r\n  margin: 0 auto;\r\n  height: ${props => props.height + \"%\"};\r\n  input {\r\n    padding: 8px;\r\n    border: 1px solid ${colors.grayLight};\r\n    border-radius: 10px;\r\n  }\r\n  input::placeholder {\r\n    color: ${colors.grayDeep};\r\n  }\r\n`;\r\n\r\nexport const AlbumTopBar = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 3.75rem;\r\n  padding: 1.8rem;\r\n`;\r\nexport const SearchBar = styled.div`\r\n  img {\r\n    position: absolute;\r\n    width: 5%;\r\n    right: 30%;\r\n    height: 100%;\r\n  }\r\n`;\r\nexport const InnerAlbum = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n\r\n  .gallery {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0 auto;\r\n    margin-top: 2.5rem;\r\n  }\r\n\r\n  .gallery-item {\r\n    width: ${props => props.width + \"rem\"};\r\n    height: ${props => props.height + \"rem\"};\r\n    border: 1px solid #ddd;\r\n    text-align: center;\r\n    margin-bottom: 7rem;\r\n  }\r\n\r\n  .gallery-item img {\r\n    width: 100%;\r\n    height: 100%;\r\n    margin-bottom: 0.625rem;\r\n  }\r\n`;\r\n// export const HeaderLeft = styled.div`\r\n\r\nexport const AlbumList = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr); // 3개의 이미지를 가로로 나란히 표시\r\n  gap: 0.4rem;\r\n  margin: 0px auto;\r\n  position: relative;\r\n  z-index: 2;\r\n\r\n  .image-grid {\r\n    gap: 1.6rem;\r\n    margin: 1.6rem;\r\n    text-align: center;\r\n  }\r\n  .image-grid > p {\r\n    font-size: 1.8rem;\r\n    margin: 1rem 0;\r\n    font-family: ${fonts.pretendard};\r\n    color: ${colors.black};\r\n  }\r\n  .image-item {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  .image-item img {\r\n    border-radius: 5%;\r\n    width: 100%;\r\n    text-align: center;\r\n  }\r\n\r\n  .loading {\r\n    height: 10rem;\r\n    margin: 3rem;\r\n    text-align: center;\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nexport const SwiperWrap = styled.div`\r\n  body {\r\n    background-color: #eee;\r\n    font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\r\n    font-size: 14px;\r\n    color: #000;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  .swiper-pagination {\r\n    text-align: center;\r\n    padding: 0 2rem 0.5rem;\r\n  }\r\n  .swiper {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding-top: 40px;\r\n    padding-bottom: 60px;\r\n  }\r\n\r\n  .swiper-slide {\r\n    background-position: center;\r\n    background-size: cover;\r\n    width: 300px;\r\n    height: 300px;\r\n  }\r\n\r\n  .swiper-slide img {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const ContentWrap = styled.div`\r\n  margin-top: 2rem;\r\n  background: #fff;\r\n\r\n  border-top: 0.2rem solid ${colors.greenDeep};\r\n  .rce-container-input {\r\n    padding: 0 2rem;\r\n    background-color: #fafafa;\r\n  }\r\n`;\r\n\r\nexport const AlbumTitle = styled.h3`\r\n  padding-left: 2.8rem;\r\n  padding-bottom: 3rem;\r\n  background: url(${process.env.PUBLIC_URL + \"/images/information/logo1.svg\"})\r\n    no-repeat left 0.25rem/2.3rem;\r\n  color: ${colors.greenDeep};\r\n`;\r\n\r\nexport const TitleWrap = styled.div`\r\n  display: flex;\r\n  height: 4rem;\r\n  align-items: center;\r\n  border-bottom: 1px solid ${colors.grayBar};\r\n  padding: 3.5rem;\r\n  position: relative;\r\n  h3 {\r\n    display: inline-block;\r\n    font-size: 2.7rem;\r\n    font-weight: 400;\r\n    flex: 1;\r\n    text-align: center;\r\n  }\r\n  p {\r\n    position: absolute;\r\n    right: 2rem;\r\n    font-family: Pretendard;\r\n    font-size: 1.5rem;\r\n    text-align: right;\r\n    color: ${colors.grayDeep};\r\n  }\r\n`;\r\n\r\nexport const MainContent = styled.div`\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-bottom: 0.2rem solid ${colors.greenDeep};\r\n`;\r\n\r\nexport const DetailsText = styled.div`\r\n  overflow: auto;\r\n  width: 100%;\r\n  height: 100%;\r\n  font-family: Pretendard;\r\n  font-size: 2rem;\r\n\r\n  p {\r\n    line-height: 1.8;\r\n    margin: 2rem 0;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport const Footer = styled.div`\r\n  text-align: right;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin-top: 1.8rem;\r\n  position: relative;\r\n  z-index: 10;\r\n\r\n  button {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nexport const CommentWrap = styled.div`\r\n  background-color: #fafafa;\r\n  padding-bottom: 2rem;\r\n`;\r\n\r\nexport const FileListStyle = styled.div`\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const buttonStyle = {\r\n  position: \"relative\",\r\n  zIndex: 100,\r\n};\r\n"],"names":["path","concat","SERVER_URL","getAlbum","async","pno","successFn","failFn","errorFn","_ref","res","jwtAxios","get","status","toString","charAt","data","error","axios","getlistAll","page","_ref2","putAlbum","product","_ref4","header","headers","put","postAlbum","_ref5","response","post","statusText","deleteAlbum","ialbum","_ref7","delete","useCustomLogin","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","teacherUid","isName","teacherNm","isParentLogin","iparent","doLogin","loginParam","loginPostAsync","payload","doLogout","logout","doParentLogin","postParentLoginAsync","moveToPath","pathname","replace","moveToLogin","_jsx","Navigate","to","refreshAccessToken","memberInfo","getCookie","accessToken","refreshToken","newTokens","refreshJWT","setCookie","console","IMG_URL","imgpath","customRequest","onSuccess","initAlbumCommnet","albumTitle","albumContents","albumPic","albumComments","createdAt","ModifyAlbum","useParams","formRef","useRef","albumData","setAlbumData","useState","form","Form","useForm","fileList","setFileList","isModalVisible","setIsModalVisible","handleSuccess","handleFailure","errorMessage","Modal","title","content","handleError","useEffect","setFieldsValue","transformedFileList","map","pic","index","uid","name","url","errorData","fetchAlbumData","_jsxs","AlbumWrap","paddingTop","width","height","children","PageTitle","style","padding","borderTop","borderBottom","background","marginTop","ref","onFinish","formData","FormData","dto","Blob","JSON","stringify","iteacher","type","append","forEach","fetch","file","blob","originFileObj","message","Item","initialValue","rules","required","Input","placeholder","TextArea","FileListStyle","Upload","Dragger","action","listType","beforeUpload","newFileList","onRemove","filter","item","onChange","className","multiple","lineHeight","Button","icon","UploadOutlined","float","GreenBtn","onClick","handleGreenButtonClick","current","submit","PinkBtn","handleCancelConfirmation","confirm","onOk","okText","cancelText","marginLeft","Link","open","handleOk","onCancel","handleCancel","cancelButtonProps","display","AlbumModify","styled","div","_templateObject","_taggedTemplateLiteral","props","colors","grayLight","grayDeep","AlbumTopBar","_templateObject2","SearchBar","_templateObject3","AlbumList","_templateObject4","_templateObject5","fonts","pretendard","black","SwiperWrap","_templateObject6","ContentWrap","_templateObject7","greenDeep","AlbumTitle","h3","_templateObject8","TitleWrap","_templateObject9","grayBar","MainContent","_templateObject10","DetailsText","_templateObject11","Footer","_templateObject12","_templateObject13","_templateObject14"],"sourceRoot":""}