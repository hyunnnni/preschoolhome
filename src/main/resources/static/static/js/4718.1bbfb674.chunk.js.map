{"version":3,"file":"static/js/4718.1bbfb674.chunk.js","mappings":"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","sources":["api/album/album_api.js","components/album/ModifyAlbum.js","pages/album/AlbumModify.js","styles/album/album.js","styles/ui/buttons.js","../node_modules/@ant-design/icons-svg/es/asn/CheckOutlined.js","../node_modules/@ant-design/icons/es/icons/CheckOutlined.js"],"sourcesContent":["import axios from \"axios\";\nimport { SERVER_URL } from \"../config\";\nimport jwtAxios from \"../../util/jwtUtil\";\nconst path = `${SERVER_URL}/api/album`;\n\n// ialbum = 세부 글 넘버.\n// page = 전체리스트\n// ialbumComment = 세부 댓글 넘버\n\n// 활동앨범 상세조회 get\nexport const getAlbum = async ({ pno, successFn, failFn, errorFn }) => {\n  try {\n    const res = await jwtAxios.get(`${path}?ialbum=${pno}`);\n    // console.log(\"res\", res);\n    const status = res.status.toString();\n    if (status.charAt(0) === \"2\") {\n      // console.log(\"res.data임 : \", res.data);\n      successFn(...res.data);\n    } else {\n      failFn(\"자료 호출 에러입니다.\");\n    }\n  } catch (error) {\n    const demo = await axios.get(`/`);\n    errorFn(demo.data);\n    console.log(error);\n  }\n};\n\n// album/listall?page=1\n\n// 활동 앨범 전체 조회 get\nexport const getlistAll = async ({ page, successFn, failFn, errorFn }) => {\n  try {\n    const res = await jwtAxios.get(`${path}/listall?page=${page}`);\n    const status = res.status.toString();\n    if (status.charAt(0) === \"2\") {\n      console.log(\"res.data : \", res.data);\n      successFn(res.data);\n    } else {\n      failFn(\"자료 호출 에러입니다.\");\n    }\n  } catch (error) {\n    const demo = await axios.get(`/`);\n    errorFn(demo.data);\n    console.log(error);\n  }\n};\n\n// edit?ialbum=1\n// 수정할 앨범 선택시 세부 정보 조회 get\nexport const getEditAlbum = async ({ ialbum, successFn, failFn, errorFn }) => {\n  try {\n    const res = await jwtAxios.get(`${path}/edit?ialbum=${ialbum}`);\n    const status = res.status.toString();\n    if (status.charAt(0) === \"2\") {\n      console.log(\"res.data : \", res.data);\n      successFn(res.data);\n    } else {\n      failFn(\"자료 호출 에러입니다.\");\n    }\n  } catch (error) {\n    const demo = await axios.get(`/`);\n    errorFn(demo.data);\n    console.log(error);\n  }\n};\n\n// 수정한 앨범 put 하기.\nexport const putAlbum = async ({ product, successFn, failFn, errorFn }) => {\n  console.log(\"product\", product);\n  try {\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\n    const res = await jwtAxios.put(`${path}`, product, header);\n    const status = res.status.toString();\n    if (status.charAt(0) === \"2\") {\n      console.log(\"res.data : \", res.data);\n      successFn(res.data);\n      return res.data;\n    } else {\n      failFn(\"수정에 실패하였습니다. 다시 시도해주세요.\");\n    }\n  } catch (error) {\n    errorFn(\n      \"정보수정에 실패하였습니다. 서버가 불안정합니다. 잠시 후 다시 시도해주세요.\",\n    );\n  }\n};\n\n// 앨범 등록 POST\n// path\n// 글, 사진 등록(비동기 통신)(커뮤니티 등록)\nexport const postAlbum = async ({ product, successFn, failFn, errorFn }) => {\n  try {\n    console.log(\"Add 컴포넌트에서 글 작성한거\", product);\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\n    const response = await jwtAxios.post(`${path}`, product, header);\n    const status = response.status.toString();\n    if (status.charAt(0) === \"2\") {\n      successFn(response.data);\n    } else {\n      failFn(\"글 등록 오류\", response.statusText);\n    }\n  } catch (error) {\n    console.log(\"글 등록 서버오류\", error.response.data);\n    errorFn(\"글 등록 서버오류\", error.response.data);\n  }\n};\n\n// 앨범 댓글 등록 POST\n// path\nexport const postAlbumComment = async ({ successFn, failFn, errorFn }) => {\n  try {\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\n    const res = await jwtAxios.post();\n    const status = res.status.toString();\n    if (status.charAt(0) === \"2\") {\n      // 화면처리용\n      successFn(res.data);\n    } else {\n      failFn(\"댓글 등록에 실패하였습니다. 다시 시도해주세요.\");\n    }\n  } catch (error) {\n    errorFn(\n      \"댓글 등록에 실패하였습니다. 서버가 불안정하니 잠시 후 다시 시도해주세요.\",\n    );\n  }\n};\n\n// 앨범 글 삭제 Delete\n// ?ialbum=1\nexport const deleteAlbum = async ({ ialbum, successFn, failFn, errorFn }) => {\n  try {\n    // 여기서도 이미지가 추가될 수 있어요.\n    // header 가 필요합니다.\n    const res = await jwtAxios.delete(`${path}?ialbum=${ialbum}`);\n\n    const status = res.status.toString();\n    if (status.charAt(0) === \"2\") {\n      successFn(res.data);\n    } else {\n      failFn(\"삭제 호출 오류입니다.\");\n    }\n  } catch (error) {\n    errorFn(\n      \"삭제에 실패하였습니다. 서버가 불안정하니 잠시 후 다시 시도해주세요.\",\n    );\n  }\n};\n\n// 앨범 댓글 삭제 Delete\n// comment?ialbumComment=0&ialbum=0&iteacher=0&iparent=0\nexport const deleteAlbumComment = async ({\n  ialbumComment,\n  ialbum,\n  iteacher,\n  iparent,\n  commentInfo,\n  successFn,\n  failFn,\n  errorFn,\n}) => {\n  try {\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\n    const res = await jwtAxios.delete(\n      `${path}/comment?ialbumComment=${ialbumComment}&ialbum=${ialbum}&iteacher=${iteacher}&iparent=${iparent}`,\n      commentInfo,\n    );\n    const status = res.status.toString();\n    if (status.charAt(0) === \"2\") {\n      successFn(res.data);\n    } else {\n      failFn();\n    }\n  } catch (error) {\n    errorFn();\n  }\n};\n","// ModifyAlbum.js\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input, Modal, Upload } from \"antd\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { getAlbum, putAlbum } from \"../../api/album/album_api\";\nimport { IMG_URL } from \"../../api/config\";\nimport { AlbumWrap, FileListStyle } from \"../../styles/album/album\";\nimport { PageTitle } from \"../../styles/basic\";\nimport { GreenBtn, PinkBtn } from \"../../styles/ui/buttons\";\nconst path = `${IMG_URL}/api/album`;\nconst imgpath = `${IMG_URL}/pic/album`;\nconst customRequest = ({ onSuccess }) => {\n  onSuccess(\"ok\");\n};\nconst initAlbumCommnet = [\n  {\n    albumTitle: \"\",\n    albumContents: \"\",\n    albumPic: [],\n    albumComments: [],\n    createdAt: \"\",\n  },\n];\nconst ModifyAlbum = () => {\n  const { pno } = useParams();\n  const formRef = useRef();\n  const [albumData, setAlbumData] = useState(initAlbumCommnet); // albumData 상태를 추가\n\n  const [form] = Form.useForm();\n  const [fileList, setFileList] = useState([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const navigate = useNavigate();\n  const handleChange = info => {\n    let fileList = [...info.fileList].filter(file => !!file.status);\n    setFileList(fileList);\n  };\n\n  const uploadAreaStyle = {\n    height: \"150px\",\n    lineHeight: \"150px\",\n  };\n  const handleGreenButtonClick = () => {\n    formRef.current.submit(); // Form의 submit 메서드 호출\n  };\n\n  const onFinish = async data => {\n    const formData = new FormData();\n    const dto = {\n      iteacher: data.iteacher,\n      albumTitle: data.albumTitle,\n      albumContents: data.albumContents,\n      ialbum: data.ialbum,\n    };\n\n    formData.append(\n      \"dto\",\n      new Blob([JSON.stringify(dto)], { type: \"application/json\" }),\n    );\n\n    if (data.pics && data.pics.length > 0) {\n      data.pics.forEach(file => {\n        // Check that each item is a file before appending\n        if (file instanceof File) {\n          formData.append(\"pics\", file, file.name);\n        }\n      });\n    } else {\n      // If there are no images, potentially handle the scenario as required by your backend\n      // For example, you might need to append a flag or handle differently if no images are provided\n      console.log(\"No images to upload.\");\n    }\n\n    // formData를 서버에 전송\n    putAlbum({\n      product: formData,\n      successFn: handleSuccess,\n      failFn: handleFailure,\n      errorFn: handleError,\n    });\n  };\n\n  const handleSuccess = response => {\n    setIsModalVisible(true);\n    console.log(\"수정이 성공적으로 완료되었습니다.\", response);\n    // 성공적으로 업로드 완료 후 처리할 작업을 추가할 수 있습니다.\n    // 예를 들어, 수정된 앨범의 상세 페이지로 리디렉션할 수 있습니다.\n    navigate(`/album/details/${pno}`);\n  };\n\n  const handleFailure = errorMessage => {\n    Modal.error({\n      title: \"앨범 업로드 실패\",\n      content: errorMessage,\n    });\n  };\n\n  const handleError = error => {\n    console.error(\"앨범 업로드 오류:\", error);\n    Modal.error({\n      title: \"앨범 업로드 중 오류 발생\",\n      content:\n        \"서버 오류 또는 네트워크 문제가 발생했습니다. 다시 시도해주세요.\",\n    });\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancelConfirmation = () => {\n    Modal.confirm({\n      title: \"정말 취소하시겠습니까?\",\n      content: \"수정 내용이 저장되지 않습니다.\",\n      onOk: () => {\n        console.log(\"취소가 확인되었습니다.\");\n        navigate(\"/album\"); // 사용자를 앨범 목록 페이지로 이동\n      },\n      okText: \"확인\",\n      cancelText: \"계속 수정\",\n    });\n  };\n\n  useEffect(() => {\n    const fetchAlbumData = async () => {\n      getAlbum({\n        pno: pno,\n        successFn: data => {\n          setAlbumData(data); // Set the album data in state\n\n          // Update form fields with the album data\n          form.setFieldsValue({\n            albumTitle: data.albumTitle,\n            albumContents: data.albumContents,\n          });\n\n          // Transform album pictures for the fileList state\n          const transformedFileList = data.albumPic.map((pic, index) => ({\n            uid: index.toString(), // uid is required to be unique\n            name: pic, // file name\n            status: \"done\", // upload status\n            url: `${imgpath}/${pno}/${pic}`, // file URL, adjust the path as needed\n          }));\n          setFileList(transformedFileList);\n        },\n        failFn: errorMessage => {\n          console.error(\"Album fetch failed:\", errorMessage);\n          // Handle failure (show error message to user, etc.)\n        },\n        errorFn: errorData => {\n          console.error(\"Error fetching album:\", errorData);\n          // Handle error (show error message to user, etc.)\n        },\n      });\n    };\n\n    fetchAlbumData();\n  }, [pno, form]);\n\n  const beforeUpload = file => {\n    // 새로 업로드되는 파일을 fileList에 추가\n    const newFileList = [...fileList, file];\n    setFileList(newFileList);\n    return false; // 자동 업로드를 방지\n  };\n\n  const onRemove = file => {\n    // 파일이 제거될 때 fileList에서 해당 파일을 제거\n    const newFileList = fileList.filter(item => item.uid !== file.uid);\n    setFileList(newFileList);\n  };\n\n  return (\n    <AlbumWrap paddingTop={40} width={100} height={100}>\n      <PageTitle>활동앨범</PageTitle>\n      <div\n        style={{\n          width: \"100%\",\n          height: 560,\n          padding: 16,\n          borderTop: \"1.5px solid #00876D\",\n          borderBottom: \"1.5px solid #00876D\",\n          background: \"#FAFAFA\",\n          marginTop: 30,\n        }}\n      >\n        <Form ref={formRef} form={form} onFinish={onFinish}>\n          <Form.Item\n            name=\"albumTitle\"\n            initialValue={albumData.albumTitle} // 기존 값 설정\n            rules={[{ required: true, message: \"제목을 입력해주세요!\" }]}\n          >\n            <Input placeholder=\"제목 입력\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"albumContents\"\n            initialValue={albumData.albumContents} // 기존 값 설정\n            style={{ height: \"150px\" }}\n            rules={[{ required: true, message: \"내용을 입력해주세요!\" }]}\n          >\n            <Input.TextArea\n              placeholder=\"내용 입력\"\n              style={{ height: \"150px\" }}\n            />\n          </Form.Item>\n          <FileListStyle>\n            <Upload.Dragger\n              action={`${path}`}\n              listType=\"picture\"\n              fileList={fileList}\n              beforeUpload={beforeUpload}\n              onRemove={onRemove}\n              onChange={handleChange}\n              customRequest={customRequest}\n              className=\"upload-list-inline\"\n              multiple={true}\n              style={uploadAreaStyle}\n              // onPreview={handlePreview}\n            >\n              <Button icon={<UploadOutlined />}>업로드 </Button>\n            </Upload.Dragger>\n          </FileListStyle>\n        </Form>\n        <div\n          style={{\n            paddingTop: 15,\n            float: \"right\",\n            // position: \"absolute\",\n            // background: \"red\",\n          }}\n        >\n          <GreenBtn onClick={handleGreenButtonClick}>수정</GreenBtn>\n\n          <PinkBtn\n            onClick={handleCancelConfirmation}\n            style={{ marginLeft: 20 }}\n          >\n            취소\n          </PinkBtn>\n        </div>\n      </div>\n\n      <Link to=\"/album\">\n        <Modal\n          title=\"수정 완료\"\n          open={isModalVisible}\n          onOk={handleOk}\n          onCancel={handleCancel}\n          okText=\"확인\"\n          cancelButtonProps={{ style: { display: \"none\" } }}\n          width={350}\n        >\n          <p>성공적으로 수정되었습니다.</p>\n        </Modal>\n      </Link>\n    </AlbumWrap>\n  );\n};\n\nexport default ModifyAlbum;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport ModifyAlbum from \"../../components/album/ModifyAlbum\";\nimport { getAlbum } from \"../../api/album/album_api\"; // 데이터를 가져오는 API 함수를 import\n\nconst AlbumModify = () => {\n  const { pno } = useParams();\n  const [albumData, setAlbumData] = useState(null); // 앨범 데이터를 위한 상태\n\n  useEffect(() => {\n    // 데이터 가져오기\n    getAlbum({\n      pno: pno,\n      successFn: data => {\n        setAlbumData(data); // 앨범 데이터 상태 업데이트\n      },\n      // 에러 처리는 필요에 따라 추가\n    });\n  }, [pno]);\n\n  return albumData ? <ModifyAlbum albumData={albumData} /> : null; // 데이터가 있을 때만 ModifyAlbum 렌더링\n};\n\nexport default AlbumModify;\n","/* eslint-disable no-undef */\nimport styled from \"@emotion/styled\";\nimport { colors, fonts, shadow } from \"../basic\";\nexport const AlbumWrap = styled.div`\n  overflow: hidden;\n  font-family: \"KOTRAHOPE\";\n  padding-top: ${props => props.paddingTop + \"px\"};\n\n  width: ${props => props.width + \"%\"};\n  margin: 0 auto;\n  height: ${props => props.height + \"%\"};\n  input {\n    padding: 8px;\n    border: 1px solid ${colors.grayLight};\n    border-radius: 10px;\n  }\n  input::placeholder {\n    color: ${colors.grayDeep};\n  }\n`;\n\nexport const AlbumTopBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 3.75rem;\n  padding: 1.8rem;\n`;\nexport const SearchBar = styled.div`\n  img {\n    position: absolute;\n    width: 5%;\n    right: 30%;\n    height: 100%;\n  }\n`;\nexport const InnerAlbum = styled.div`\n  width: 100%;\n  height: 100vh;\n\n  .gallery {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    width: 100%;\n    height: 100%;\n    margin: 0 auto;\n    margin-top: 2.5rem;\n  }\n\n  .gallery-item {\n    width: ${props => props.width + \"rem\"};\n    height: ${props => props.height + \"rem\"};\n    border: 1px solid #ddd;\n    text-align: center;\n    margin-bottom: 7rem;\n  }\n\n  .gallery-item img {\n    width: 100%;\n    height: 100%;\n    margin-bottom: 0.625rem;\n  }\n`;\n// export const HeaderLeft = styled.div`\n\nexport const AlbumList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); // 3개의 이미지를 가로로 나란히 표시\n  gap: 0.4rem;\n  margin: 0px auto;\n  position: relative;\n  z-index: 2;\n\n  .image-grid {\n    gap: 1.6rem;\n    margin: 1.6rem;\n    text-align: center;\n  }\n  .image-grid > p {\n    font-size: 1.8rem;\n    margin: 1rem 0;\n    font-family: ${fonts.pretendard};\n    color: ${colors.black};\n  }\n  .image-item {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .image-item img {\n    border-radius: 5%;\n    width: 100%;\n    text-align: center;\n  }\n\n  .loading {\n    height: 10rem;\n    margin: 3rem;\n    text-align: center;\n    font-size: 2rem;\n  }\n`;\n\nexport const SwiperWrap = styled.div`\n  body {\n    background-color: #eee;\n    font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    color: #000;\n    margin: 0;\n    padding: 0;\n  }\n  .swiper-pagination {\n    text-align: center;\n    padding: 0 2rem 0.5rem;\n  }\n  .swiper {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    padding-top: 40px;\n    padding-bottom: 60px;\n  }\n\n  .swiper-slide {\n    background-position: center;\n    background-size: cover;\n    width: 300px;\n    height: 300px;\n  }\n\n  .swiper-slide img {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const ContentWrap = styled.div`\n  margin-top: 2rem;\n  background: #fff;\n\n  border-top: 0.2rem solid ${colors.greenDeep};\n  .rce-container-input {\n    padding: 0 2rem;\n    background-color: #fafafa;\n  }\n`;\n\nexport const AlbumTitle = styled.h3`\n  padding-left: 2.8rem;\n  padding-bottom: 3rem;\n  background: url(${process.env.PUBLIC_URL + \"/images/information/logo1.svg\"})\n    no-repeat left 0.25rem/2.3rem;\n  color: ${colors.greenDeep};\n`;\n\nexport const TitleWrap = styled.div`\n  display: flex;\n  height: 4rem;\n  align-items: center;\n  border-bottom: 1px solid ${colors.grayBar};\n  padding: 3.5rem;\n  position: relative;\n  h3 {\n    display: inline-block;\n    font-size: 2.7rem;\n    font-weight: 400;\n    flex: 1;\n    text-align: center;\n  }\n  p {\n    position: absolute;\n    right: 2rem;\n    font-family: Pretendard;\n    font-size: 1.5rem;\n    text-align: right;\n    color: ${colors.grayDeep};\n  }\n`;\n\nexport const MainContent = styled.div`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border-bottom: 0.2rem solid ${colors.greenDeep};\n`;\n\nexport const DetailsText = styled.div`\n  overflow: auto;\n  width: 100%;\n  height: 100%;\n  font-family: Pretendard;\n  font-size: 2rem;\n\n  p {\n    line-height: 1.8;\n    margin: 2rem 0;\n    text-align: center;\n  }\n`;\n\nexport const Footer = styled.div`\n  text-align: right;\n  width: 100%;\n  height: 100%;\n  margin-top: 1.8rem;\n  margin-bottom: 9rem;\n  position: relative;\n  z-index: 10;\n\n  button {\n    margin-left: 1rem;\n  }\n`;\n\nexport const CommentWrap = styled.div`\n  background-color: #fafafa;\n  padding-bottom: 2rem;\n`;\n\nexport const FileListStyle = styled.div`\n  max-height: 300px;\n  overflow-y: auto;\n`;\n\nexport const buttonStyle = {\n  position: \"relative\",\n  zIndex: 100,\n};\n","import styled from \"@emotion/styled\";\nimport { colors, shadow } from \"../basic\";\nimport { Button, Modal, Space } from \"antd\";\n// 버튼 기본 스타일 정의\nconst defaultBtnStyle = {\n  fontSize: \"1.8rem\",\n  fontFamily: `\"KOTRAHOPE\", \"Pretendard\", sans-serif`,\n  background: \"#fff\",\n  border: 0,\n  padding: \"1rem 1.5rem\",\n  borderRadius: \"1rem\",\n  cursor: \"pointer\",\n  minWidth: \"8rem\",\n};\n\n// 버튼 마우스오버 효과\nconst buttonHover = {\n  boxShadow: \"0px 0px 10px 0px rgba(0, 0, 0, 0.15)\",\n};\n\nexport const BtnWrap = styled.div`\n  position: relative;\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n`;\n\n// 색상 별 버튼 style\nexport const GreenBtn = styled.button`\n  ${defaultBtnStyle}\n  background: ${colors.greenLight};\n  color: ${colors.greenDeep};\n  transition: 0.2s;\n  :hover {\n    ${buttonHover}\n  }\n`;\nexport const OrangeBtn = styled.button`\n  ${defaultBtnStyle}\n  background: ${colors.orangeLight};\n  color: ${colors.orangeDeep};\n  transition: 0.2s;\n  :hover {\n    ${buttonHover}\n  }\n`;\nexport const PinkBtn = styled.button`\n  ${defaultBtnStyle}\n  background: ${colors.pinkLight};\n  color: ${colors.pinkDeep};\n  :hover {\n    ${buttonHover}\n  }\n`;\n\nexport const BlueBtn = styled.button`\n  ${defaultBtnStyle}\n  background: ${colors.blueLight};\n  color: ${colors.blueDeep};\n  transition: 0.2s;\n  :hover {\n    ${buttonHover}\n  }\n`;\nexport const RedBtn = styled.button`\n  ${defaultBtnStyle}\n  background: ${colors.redLight};\n  color: ${colors.redDeep};\n  transition: 0.2s;\n  :hover {\n    ${buttonHover}\n  }\n`;\nexport const PurpleBtn = styled.button`\n  ${defaultBtnStyle}\n  background: ${colors.purpleLight};\n  color: ${colors.purpleDeep};\n  transition: 0.2s;\n  :hover {\n    ${buttonHover}\n  }\n`;\nexport const GrayBtn = styled.button`\n  ${defaultBtnStyle}\n  background: ${colors.grayLight};\n  color: ${colors.grayDeep};\n  transition: 0.2s;\n  :hover {\n    ${shadow}\n  }\n`;\nexport const BlackBtn = styled.button`\n  ${defaultBtnStyle}\n  background: ${colors.grayDeep};\n  color: ${colors.white};\n  transition: 0.1s;\n  :hover {\n    ${buttonHover}\n  }\n`;\n\n// 메인 배너 버튼\nexport const MainPinkBtn = styled.button`\n  ${defaultBtnStyle}\n  background: #ffadc7;\n  color: #fe77a2;\n  transition: 0.1s;\n  :hover {\n    ${buttonHover}\n  }\n`;\n\nexport const MainBrownBtn = styled.button`\n  ${defaultBtnStyle}\n  background: #ffcc58;\n  color: #db8400;\n  transition: 0.1s;\n  :hover {\n    ${buttonHover}\n  }\n`;\n\n// 메뉴 접기 버튼\nexport const AllBtn = styled.button`\n  ${defaultBtnStyle}\n  position: absolute;\n  right: -2.5rem;\n  top: 2.5rem;\n  padding: 1rem 0.5rem;\n  font-size: 1.6rem;\n  border-radius: 0 0.5rem 0.5rem 0;\n  min-width: auto;\n  width: 2.5rem;\n  height: 7rem;\n  background: ${colors.greenLight};\n  color: ${colors.greenDeep};\n  z-index: 11;\n  word-break: break-all;\n  line-height: 1;\n`;\n\nexport const StyledeleteModal = styled(Modal)`\n  ant-btn {\n    color: red;\n  }\n`;\n","// This icon file is generated automatically.\nvar CheckOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z\" } }] }, \"name\": \"check\", \"theme\": \"outlined\" };\nexport default CheckOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport CheckOutlinedSvg from \"@ant-design/icons-svg/es/asn/CheckOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar CheckOutlined = function CheckOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: CheckOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  CheckOutlined.displayName = 'CheckOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(CheckOutlined);"],"names":["path","concat","SERVER_URL","getAlbum","async","pno","successFn","failFn","errorFn","_ref","res","jwtAxios","get","status","toString","charAt","data","error","axios","console","log","getlistAll","page","_ref2","putAlbum","product","_ref4","header","headers","put","postAlbum","_ref5","response","post","statusText","deleteAlbum","ialbum","_ref7","delete","IMG_URL","imgpath","customRequest","onSuccess","initAlbumCommnet","albumTitle","albumContents","albumPic","albumComments","createdAt","ModifyAlbum","useParams","formRef","useRef","albumData","setAlbumData","useState","form","Form","useForm","fileList","setFileList","isModalVisible","setIsModalVisible","navigate","useNavigate","handleSuccess","handleFailure","errorMessage","Modal","title","content","handleError","useEffect","setFieldsValue","transformedFileList","map","pic","index","uid","name","url","errorData","fetchAlbumData","_jsxs","AlbumWrap","paddingTop","width","height","children","_jsx","PageTitle","style","padding","borderTop","borderBottom","background","marginTop","ref","onFinish","formData","FormData","dto","iteacher","append","Blob","JSON","stringify","type","pics","length","forEach","file","File","Item","initialValue","rules","required","message","Input","placeholder","TextArea","FileListStyle","Upload","Dragger","action","listType","beforeUpload","newFileList","onRemove","filter","item","onChange","info","className","multiple","lineHeight","Button","icon","UploadOutlined","float","GreenBtn","onClick","handleGreenButtonClick","current","submit","PinkBtn","handleCancelConfirmation","confirm","onOk","okText","cancelText","marginLeft","Link","to","open","handleOk","onCancel","handleCancel","cancelButtonProps","display","AlbumModify","styled","div","_templateObject","_taggedTemplateLiteral","props","colors","grayLight","grayDeep","AlbumTopBar","_templateObject2","SearchBar","_templateObject3","AlbumList","_templateObject4","_templateObject5","fonts","pretendard","black","SwiperWrap","_templateObject6","ContentWrap","_templateObject7","greenDeep","AlbumTitle","h3","_templateObject8","TitleWrap","_templateObject9","grayBar","MainContent","_templateObject10","DetailsText","_templateObject11","Footer","_templateObject12","CommentWrap","_templateObject13","_templateObject14","defaultBtnStyle","fontSize","fontFamily","border","borderRadius","cursor","minWidth","buttonHover","boxShadow","BtnWrap","button","greenLight","OrangeBtn","orangeLight","orangeDeep","pinkLight","pinkDeep","BlueBtn","blueLight","blueDeep","PurpleBtn","redLight","redDeep","purpleLight","purpleDeep","GrayBtn","shadow","MainPinkBtn","white","MainBrownBtn","AllBtn","CheckOutlined","React","AntdIcon","_extends","CheckOutlinedSvg"],"sourceRoot":""}