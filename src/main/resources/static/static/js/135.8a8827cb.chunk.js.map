{"version":3,"file":"static/js/135.8a8827cb.chunk.js","mappings":"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","sources":["api/notice/notice_api.js","components/ui/ModalOneBtn.js","hooks/useCustomLogin.js","components/notice/ListNotice.js","pages/notice/NoticeList.js","styles/ui/warning.js"],"sourcesContent":["import jwtAxios from \"../../util/jwtUtil\";\r\nimport { SERVER_URL } from \"../config\";\r\n\r\nconst path = `${SERVER_URL}/api/full`;\r\n\r\n// 유치원소식 불러오기\r\nexport const getDetail = async ({ tno, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.get(`${path}?iFullNotice=${tno}`);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"자료 호출 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(error);\r\n  }\r\n};\r\n\r\n// 유치원소식 리스트 불러오기\r\nexport const getList = async ({ page, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.get(`${path}/listall?page=${page}`);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"자료 호출 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    const res = error.response.data;\r\n    errorFn(res.message);\r\n  }\r\n};\r\n\r\n// 유치원소식 게시글 등록하기\r\nexport const postNotice = async ({ product, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.post(`${path}`, product);\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(res.data);\r\n    } else {\r\n      failFn(\"글 등록 오류\");\r\n    }\r\n  } catch (error) {\r\n    const res = error.response.data;\r\n    errorFn(res.message);\r\n  }\r\n};\r\n\r\n// 유치원소식 게시글 삭제하기\r\nexport const deleteNotice = async ({ tno, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const res = await jwtAxios.delete(`${path}?iteacher=1&ifullNotice=${tno}`);\r\n    const status = res.status.toString();\r\n\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn();\r\n    } else {\r\n      failFn(\"삭제 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(error);\r\n  }\r\n};\r\n\r\n// 유치원소식 게시글 수정하기\r\nexport const putNotice = async ({ data, successFn, failFn, errorFn }) => {\r\n  try {\r\n    const header = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n    const res = await jwtAxios.put(`${path}`, data, header);\r\n\r\n    const status = res.status.toString();\r\n    if (status.charAt(0) === \"2\") {\r\n      successFn(res.data);\r\n      return res.data;\r\n    } else {\r\n      failFn(\"수정 에러입니다.\");\r\n    }\r\n  } catch (error) {\r\n    errorFn(error);\r\n  }\r\n};\r\n","import { Modal } from \"antd\";\r\nimport React from \"react\";\r\nimport { OrangeBtn, PinkBtn } from \"../../styles/ui/buttons\";\r\nimport { ModalBody, ModalTitle } from \"../../styles/ui/warning\";\r\n\r\nconst ModalOneBtn = ({ isOpen, handleOk, title, subTitle, children }) => {\r\n  const modalStyles = {\r\n    footer: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      gap: \"2rem\",\r\n    },\r\n    body: {\r\n      paddingTop: \"2rem\",\r\n    },\r\n  };\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      onOk={handleOk}\r\n      closeIcon={null}\r\n      width={400}\r\n      footer={[\r\n        <PinkBtn key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n          확인\r\n        </PinkBtn>,\r\n      ]}\r\n      styles={modalStyles}\r\n    >\r\n      <ModalTitle>\r\n        <h3>{title}</h3>\r\n        <p>{subTitle}</p>\r\n      </ModalTitle>\r\n      <ModalBody>{children}</ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalOneBtn;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  loginPostAsync,\r\n  logout,\r\n  postParentLoginAsync,\r\n} from \"../slices/loginSlice\";\r\nimport { getCookie, setCookie } from \"../util/cookieUtil\";\r\nimport { refreshJWT } from \"../util/jwtUtil\";\r\n\r\nconst useCustomLogin = () => {\r\n  // 패스 이동하기\r\n  const navigate = useNavigate();\r\n\r\n  // RTK 상태값 업데이트\r\n  const dispatch = useDispatch();\r\n\r\n  // RTK 상태값 읽기\r\n  const loginState = useSelector(state => state.loginSlice);\r\n\r\n  // 로그인 상태값 파악\r\n  const isLogin = loginState.teacherUid ? true : false;\r\n  const isName = loginState.teacherNm ? true : false;\r\n  const isParentLogin = loginState.iparent ? true : false;\r\n\r\n  // 로그인 기능\r\n  const doLogin = ({ loginParam, successFn, failFn, errorFn }) => {\r\n    // 로그인 어느화면에서 실행이 될 소지가 높아요.\r\n    // 로그인 상태 업데이트\r\n    const action = dispatch(\r\n      loginPostAsync({ loginParam, successFn, failFn, errorFn }),\r\n    );\r\n    // 결과값\r\n    return action.payload;\r\n  };\r\n\r\n  // 학부모 로그인 기능\r\n  const doParentLogin = ({ loginParam, successFn, failFn, errorFn }) => {\r\n    // 로그인 어느화면에서 실행이 될 소지가 높아요.\r\n    // 로그인 상태 업데이트\r\n    const action = dispatch(\r\n      postParentLoginAsync({ loginParam, successFn, failFn, errorFn }),\r\n    );\r\n    // 결과값\r\n    return action.payload;\r\n  };\r\n\r\n  // 로그아웃 기능\r\n  const doLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  // 패스이동 기능\r\n  const moveToPath = path => {\r\n    // 패스로 이동 후에 replace:ture 를 적용시 뒤로 가기 화면\r\n    // 이전 페이지 기록을 남기지 않는다.\r\n    navigate({ pathname: path }, { replace: true });\r\n  };\r\n\r\n  // 로그인 페이지로 이동\r\n  const moveToLogin = () => {\r\n    // console.log(\"페이지 이동\");\r\n    return <Navigate replace to=\"/login\" />;\r\n  };\r\n\r\n  // 액세스 토큰 리프레시 및 업데이트\r\n  const refreshAccessToken = async () => {\r\n    const memberInfo = getCookie(\"member\");\r\n    const { accessToken, refreshToken } = memberInfo;\r\n\r\n    try {\r\n      const newTokens = await refreshJWT(accessToken, refreshToken);\r\n      // 새로운 액세스 토큰으로 기존 쿠키의 accessToken 값만 업데이트\r\n      memberInfo.accessToken = newTokens.accessToken;\r\n      setCookie(\"member\", memberInfo, 1);\r\n      return newTokens.accessToken;\r\n    } catch (error) {\r\n      // 리프레시 실패 처리\r\n      console.error(\"토큰 리프레시 실패:\", error);\r\n      throw error; // 실패한 경우 예외를 다시 던져서 호출자가 처리할 수 있도록 함\r\n    }\r\n  };\r\n\r\n  return {\r\n    loginState,\r\n    isLogin,\r\n    isName,\r\n    isParentLogin,\r\n    doLogin,\r\n    doLogout,\r\n    doParentLogin,\r\n    moveToPath,\r\n    moveToLogin,\r\n    refreshAccessToken,\r\n  };\r\n};\r\n\r\nexport default useCustomLogin;\r\n","import { Flex, Input, List, Pagination } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\"; // useNavigate 추가\r\nimport { getList } from \"../../api/notice/notice_api\";\r\nimport { PageTitle } from \"../../styles/basic\";\r\nimport { GreenBtn } from \"../../styles/ui/buttons\";\r\nimport { putNotice } from \"../../api/notice/notice_api\";\r\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\r\n\r\nconst { Search } = Input;\r\n\r\nconst onSearch = (value, _e, info) => console.log(info?.source, value);\r\n\r\nconst pageSize = 10;\r\n\r\nconst NoticeList = () => {\r\n  // 고정 공지글과 일반 공지글을 분리하여 저장\r\n  const [fixedNotices, setFixedNotices] = useState([]);\r\n  const [normalNotices, setNormalNotices] = useState([]);\r\n  const [current, setCurrent] = useState(1);\r\n  const [listData, setListData] = useState([]);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  // 선생님 로그인 체크\r\n  const { isLogin } = useCustomLogin();\r\n\r\n  // 페이지 변경 처리\r\n  const onChange = page => {\r\n    setCurrent(page);\r\n    fetchPageData(page); // 새 페이지 데이터를 가져옵니다.\r\n  };\r\n\r\n  const size = \"small\";\r\n\r\n  // 페이지 데이터 가져오기\r\n  const fetchPageData = page => {\r\n    getList({\r\n      page,\r\n      successFn: result => {\r\n        setListData(result.list); // 현재 페이지의 리스트 데이터 설정\r\n        setTotalCount(result.noticeCnt); // 전체 공지사항 개수 설정\r\n        // 고정 공지글과 일반 공지글 분리\r\n        const fixed = result.list.filter(item => item.fullNoticeFix === 1);\r\n        const normal = result.list.filter(item => item.fullNoticeFix !== 1);\r\n        setFixedNotices(fixed);\r\n        setNormalNotices(normal);\r\n      },\r\n      failFn: result => {\r\n        console.error(\"List fetch failed:\", result);\r\n      },\r\n      errorFn: result => {\r\n        console.error(\"Error fetching list:\", result);\r\n      },\r\n    });\r\n  };\r\n\r\n  // 컴포넌트가 마운트될 때 첫 페이지 데이터를 가져옵니다.\r\n  useEffect(() => {\r\n    fetchPageData(current);\r\n  }, [current]);\r\n\r\n  const successFn = result => {\r\n    // console.log(\"성공\", result);\r\n    setListData(result);\r\n  };\r\n  const failFn = result => {\r\n    // console.log(result);\r\n  };\r\n  const errorFn = result => {\r\n    // console.log(result);\r\n  };\r\n\r\n  // console.log(\"확인\", listData);\r\n\r\n  return (\r\n    <div style={{ marginTop: 30 }}>\r\n      <Flex\r\n        gap=\"small\"\r\n        justify=\"space-between\"\r\n        style={{\r\n          width: \"100%\",\r\n          marginBottom: 20,\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <PageTitle>유치원소식</PageTitle>\r\n        <Flex gap=\"small\" alignitems=\"center\">\r\n          <Search\r\n            placeholder=\"제목을 입력하세요.\"\r\n            allowClear\r\n            onSearch={onSearch}\r\n            style={{\r\n              width: 330,\r\n              marginRight: 20,\r\n            }}\r\n          />\r\n\r\n          {isLogin ? (\r\n            <Link to=\"/notice/write/\">\r\n              <GreenBtn\r\n                type=\"primary\"\r\n                size={size}\r\n                style={{\r\n                  background: \"#D3ECC8\",\r\n                  borderColor: \"#D3ECC8\",\r\n                  padding: \"15px 30px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                  borderRadius: \"1rem\",\r\n                  color: \"#00876D\",\r\n                }}\r\n              >\r\n                글쓰기\r\n              </GreenBtn>\r\n            </Link>\r\n          ) : null}\r\n        </Flex>\r\n      </Flex>\r\n\r\n      <List\r\n        size=\"large\"\r\n        itemLayout=\"vertical\"\r\n        style={{\r\n          width: \"100%\",\r\n          margin: \"0 auto\",\r\n          background: \"white\",\r\n          borderTop: \"1px solid #00876D\",\r\n          borderBottom: \"1px solid #00876D\",\r\n        }}\r\n        dataSource={listData}\r\n        renderItem={(item, index) => (\r\n          <Link\r\n            to={`/notice/details/${item.ifullNotice}`}\r\n            key={item.ifullNotice}\r\n          >\r\n            <List.Item\r\n              style={{\r\n                borderLeft: \"none\",\r\n                borderRight: \"none\",\r\n                borderBottom: \"1px solid #e8e8e8\",\r\n                padding: \"12px 0\",\r\n                background:\r\n                  index < 3 && item.fullNoticeFix ? \"#E7F6ED\" : \"white\",\r\n                display: \"flex\",\r\n                justifyContent: \"flex-start\",\r\n                alignItems: \"center\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {/* 고정글 아이콘 */}\r\n              {index < 3 && item.fullNoticeFix === 1 ? (\r\n                <img\r\n                  src=\"/images/common/notice/loudSpeaker.svg\"\r\n                  alt=\"고정글\"\r\n                  style={{\r\n                    marginRight: 60,\r\n                    marginLeft: 60,\r\n                    width: 20,\r\n                    height: 20,\r\n                  }}\r\n                />\r\n              ) : (\r\n                <div style={{ marginRight: 60, marginLeft: 60, color: \"gray\" }}>\r\n                  {item.ifullNotice}\r\n                </div>\r\n              )}\r\n\r\n              {/* 게시글 번호, 제목, 날짜 표시 (최상단 고정글에는 번호 표시 안 함) */}\r\n\r\n              <div style={{ flex: 1 }}>\r\n                <Link to={`/notice/details/${item.ifullNotice}`}>\r\n                  <span\r\n                    style={{\r\n                      color:\r\n                        index < 3 && item.fullNoticeFix ? \"#00876D\" : \"#000000\",\r\n                      fontWeight:\r\n                        index < 3 && item.fullNoticeFix ? \"bold\" : \"normal\",\r\n                    }}\r\n                  >\r\n                    {item.fullTitle}\r\n                  </span>\r\n                </Link>\r\n              </div>\r\n              <div\r\n                style={{ color: \"gray\", textAlign: \"right\", marginRight: 30 }}\r\n              >\r\n                <img\r\n                  src=\"/images/common/notice/clock.svg\"\r\n                  alt=\"\"\r\n                  style={{ height: 30, marginRight: 10 }}\r\n                />\r\n                {/* 시간 부분 제외하고 날짜만 표시 */}\r\n                {item.createdAt.substring(0, 10)}\r\n              </div>\r\n            </List.Item>\r\n          </Link>\r\n        )}\r\n      ></List>\r\n\r\n      <Pagination\r\n        current={current}\r\n        onChange={onChange}\r\n        total={totalCount}\r\n        pageSize={pageSize}\r\n        style={{\r\n          marginTop: 35,\r\n          textAlign: \"center\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoticeList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"; // useNavigate 추가\r\nimport ListNotice from \"../../components/notice/ListNotice\";\r\nimport ModalOneBtn from \"../../components/ui/ModalOneBtn\";\r\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\r\n\r\nconst NoticeList = () => {\r\n  const navigate = useNavigate();\r\n  const { isLogin, isParentLogin } = useCustomLogin();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [subTitle, setSubTitle] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!isLogin && !isParentLogin) {\r\n      // 로그인하지 않았을 경우\r\n      setIsOpen(true);\r\n      setTitle(\"회원 전용 페이지\");\r\n      setSubTitle(\"로그인 회원만 접근 가능합니다.\");\r\n    } else {\r\n      // 다른 상황에 대한 처리가 필요한 경우 여기에 추가\r\n      // 예를 들어, 기본 오류 메시지 설정 등\r\n      // setTitle(\"에러\");\r\n      // setSubTitle(\"리스트를 불러오는 중 오류가 발생했습니다.\");\r\n    }\r\n  }, [isLogin, isParentLogin]);\r\n\r\n  const handleOk = () => {\r\n    setIsOpen(false);\r\n    if (!isLogin && !isParentLogin) {\r\n      navigate(\"/login\"); // 로그인 페이지로 이동\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ModalOneBtn\r\n        isOpen={isOpen}\r\n        handleOk={handleOk}\r\n        title={title}\r\n        subTitle={subTitle}\r\n      />\r\n      <ListNotice isLogin={isLogin} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoticeList;\r\n","import styled from \"@emotion/styled\";\r\nimport { colors } from \"../basic\";\r\n\r\n// 경고창\r\nexport const WarningWrap = styled.div`\r\n  position: fixed;\r\n  left: -300%;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.3);\r\n  z-index: 999999;\r\n`;\r\n\r\nexport const WarningBox = styled.div`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 40%;\r\n  transform: translate(-50%, -50%);\r\n  background: #fff;\r\n  padding: 3rem;\r\n  text-align: center;\r\n  border-radius: 1rem;\r\n  h5 {\r\n    font-weight: 400;\r\n    font-size: 1.4rem;\r\n    margin: 1rem 0;\r\n  }\r\n  p {\r\n    font-weight: 200;\r\n    font-size: 1.2rem;\r\n    color: #555;\r\n  }\r\n`;\r\n\r\n// 모달창\r\nexport const ModalTitle = styled.div`\r\n  text-align: center;\r\n  margin-bottom: 3rem;\r\n  h3 {\r\n    color: ${colors.greenDeep};\r\n    margin-bottom: 1rem;\r\n  }\r\n  white-space: pre-line;\r\n`;\r\nexport const ModalBody = styled.div`\r\n  position: relative;\r\n`;\r\n"],"names":["path","concat","SERVER_URL","getDetail","async","tno","successFn","failFn","errorFn","_ref","res","jwtAxios","get","status","toString","charAt","data","error","getList","page","_ref2","response","message","postNotice","product","_ref3","post","deleteNotice","_ref4","delete","putNotice","_ref5","header","headers","put","isOpen","handleOk","title","subTitle","children","_jsxs","Modal","open","onOk","closeIcon","width","footer","_jsx","PinkBtn","type","onClick","styles","display","justifyContent","gap","body","paddingTop","ModalTitle","ModalBody","useCustomLogin","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","teacherUid","isName","teacherNm","isParentLogin","iparent","doLogin","loginParam","loginPostAsync","payload","doLogout","logout","doParentLogin","postParentLoginAsync","moveToPath","pathname","replace","moveToLogin","Navigate","to","refreshAccessToken","memberInfo","getCookie","accessToken","refreshToken","newTokens","refreshJWT","setCookie","console","Search","Input","onSearch","value","_e","info","log","source","NoticeList","fixedNotices","setFixedNotices","useState","normalNotices","setNormalNotices","current","setCurrent","listData","setListData","totalCount","setTotalCount","fetchPageData","result","list","noticeCnt","fixed","filter","item","fullNoticeFix","normal","useEffect","style","marginTop","Flex","justify","marginBottom","alignItems","PageTitle","alignitems","placeholder","allowClear","marginRight","Link","GreenBtn","size","background","borderColor","padding","borderRadius","color","List","itemLayout","margin","borderTop","borderBottom","dataSource","renderItem","index","ifullNotice","Item","borderLeft","borderRight","cursor","src","alt","marginLeft","height","flex","fontWeight","fullTitle","textAlign","createdAt","substring","Pagination","onChange","total","pageSize","setIsOpen","setTitle","setSubTitle","_Fragment","ModalOneBtn","ListNotice","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","colors","greenDeep","_templateObject4"],"sourceRoot":""}